[OpKindList 4.1d] // Экспорт данных произвел 0000BAV 12/07/2016 09:41:44 БД "-db /home2/bis/quit41d/db/bisquit,-ld bisquit,-L 200000,-n 500,-B 8000,-omsize 1400,-spin 10000,-U qbis,-P,-n 500"
// ***************************************************************************
FXSW2DAY_VAL:
DO TRANSACTION EXECUTABLE:
   /// <tr_package>
   /// 000.FXSW2DAY_VAL
   /// </tr_package>

   /// <tr_name-opkind>
   /// Сделка SWAP оплата валюта (день 2-й)
   /// </tr_name-opkind>

   /// <tr_details>
   /// Назначение - реализация открытия срочных счетов для сделки класса loan-fx-tom, loan-fx-spot или loan-fx-frw, выбранной в вызывающей транзакции. Вызывается в FX2040, в FX209910 и в FX209941. Описание шаблонов, приведенное ниже, делается в порядке их следования в транзакции. Данная транзакция реализует способ учета, когда срочные счета открываются в разрезе  сделок. В "FX209920/Выполнить до" назначается переменная для имени транзакции, используемая в ш.filter для контроля на повтор исполнения операции. В "FX209920/Выполнить после" производится выдача на экран о завершении операции.
   /// 
   /// - Шаблон класса filter производит проверку по Журналу операций наличия реализованной ранее операции учета на сроч.счетах для данной сделки в данном опердне (см.рекв.where). Если такая операция не обнаружена, то производится запуск функции ГР_ТРАНЗАКЦИЯ() в Вып.после шаблона, которая после запуска фиктивной подтранзакции FX989910 возвращает нуль, в результате чего исполнение шаблона завершается и производится переход к следующему шаблону. Если операция обнаружена, то ГР_ТРАНЗАКЦИЯ() возвращает не-нуль, выдается предупреждение и транзакция откатывается (ф-ция BREAK()), что приводит к завершению всей операции. Вспомогательным назначением шаблона является в Выполнить до выдача на экран (в протокол) номера обрабатываемой сделки. Шаблон одинаков в FX209920, FX309920, FX359920, FX409920. 
   /// 
   /// - Шаблон класса banks отыскивает объект для контрагента. Вспомогательным назначением шаблона является реализация операторов в Выполнить до: определение мин.и макс.дат валютирования, формирование  в @details1 и в @details-kr стандартной части текста для Примечания к генерируемому документу (для использ.в шаблонах класса opf), определение в @buy-rub_ekv и в @sell-rub_ekv рублевых эквивалентов для валютных сумм, формирование в в @vid-kr вида курсовой разницы, в @kr - величины курсовой разницы.
   /// 
   /// -Шаблоны bal-acct с действием Поиск отыскивают объекты счетов 2-го порядка для требования и обязательства с требуемым сроком. 
   /// 
   /// -Шаблоны loan-acct с действием Поиск с ош. отыскивают привязанные к сделке объекты ролей счетов для требования и обязательства.
   /// 
   /// -Шаблоны счетов класса acctf открывают счета для требования и обязательства. Вспомогательным назначением шаблонов является осуществляемая в Выполнить до проверка события, обнаружены ли роли счетов для требования и обязательства. Если в ходе операции должен быть открыт новый счет, и счет с соответствующим номером 2-го порядка обнаружен уже открытым и привязанным к сделке, то выдается сообщение об ошибке, и транзакция откатывается.
   /// 
   /// -Шаблоны loan-acct с действием Создание генерируют объекты ролей счетов (в привязке к сделке) и привязывают к ним вновь открытые счета. 
   /// 
   /// 
   /// </tr_details>

   /// <tr_parent>
   /// 000
   /// </tr_parent>

   /// <tr_module>
   /// base
   /// </tr_module>

   /// <tr_proc>
   /// g-trans
   /// </tr_proc>

   /// <tr_DisplayForms>
   /// Нет
   /// </tr_DisplayForms>

   /// <tr_ProgressBar>
   /// Да
   /// </tr_ProgressBar>

   /// <tr_СС_АвтоОтвет>
   /// core23=Продолжить
   /// </tr_СС_АвтоОтвет>

   /// <tr_СС_ВыводВФайл>
   /// Да
   /// </tr_СС_ВыводВФайл>

   /// <tr_СС_ВыводНаЭкран>
   /// Да
   /// </tr_СС_ВыводНаЭкран>

   /// <tr_СС_ВыводПрткл>
   /// Нет
   /// </tr_СС_ВыводПрткл>

   /// <tr_СС_УровеньОтладк>
   /// 1
   /// </tr_СС_УровеньОтладк>

   // Библиотека функций парсера для счетов договора
   LIBRARY plact.

   // Библиотека функций парсера для работы с датами
   LIBRARY pdate.

   // Библиотека парсера SWIFT
   LIBRARY pswft.

   // Библиотека функций парсера для лицевых и счетов 2-го порядка.
   LIBRARY pacct.

   // Библиотека функций для конверсионных сделок.
   LIBRARY pfx.

   DO BEFORE:
      @__par = PROMPT("logical!character",
               "Тип сделки!Валюта сделки",
               "Покупка/Продажа!x(3)",
               "Покупка!840",
               "ВВЕДИТЕ ПАРАМЕТРЫ СДЕЛКИ",50,"!","F1=sb_f1log!!");
      
      IF @__par == @__ERROR THEN 0 ELSE (
      
        @TypeOper = ENTRY(1,@__par,"!");
        @CurrFX   = ENTRY(2,@__par,"!");
      //  @CurrRS   = ENTRY(3,@__par,"!");
      
        @dd1      = DATE(ДАТА() - 3);
        @dd2      = DATE(ДАТА() - 1);
        @AcctDb   = _if(@TypeOper, "93901*", "99996*");
      
        @OpFX = ОБЪЕКТ(Да,'op-date1'+chr(1)+'op-date2'+chr(1)+'currency'+chr(1)
                        + 'op-kind' +chr(1)+'acct-db',
                          @dd1+chr(1)+@dd2+chr(1)+@CurrFX+chr(1)
                        + 'FXSW1DAY_VAL'+chr(1)+@AcctDb, '',
                          'MULTIPLE,ESC_NO_ERROR,opf');
      
        IF @OpFX == "" THEN 0 ELSE
      
          @OpTransaction = РЕКВИЗИТ("opf",@OpFX,"op-transaction");
      
          @CurrFXISO = РЕКВИЗИТ('currency',@CurrFX,'i-currency');
          @cust-id  = 139690;
          @filial   = ФИЛИАЛ();
          @DetailsA = "Требования по поставке денежных средств НКЦ от " + ДАТА();
          @DetailsL = "Обязательства по поставке денежных средств НКЦ от "
                    + ДАТА();
          @details1 = "Согласно сделки SWAP заключенной на ЕТС c НКЦ "
                    + "продажа валюты расп от " + ДАТА() + " (" +@CurrFXISO + "-";
        ENDIF
      ) ENDIF;
   END BEFORE.

   10:
   DO TEMPLATE CLASS op-entry ACTION Поиск ROLE Ввод данных:
      /// <tm_AttrOptimized>
      /// Нет
      /// </tm_AttrOptimized>

      // РЕКВИЗИТ: op (формула) #1
      @op = SEARCH(INT(@OpFX))


   END TEMPLATE. // ШАБЛОН:   10  - КОНЕЦ

   20:
   DO TEMPLATE CLASS op-entry ACTION Поиск ROLE Ввод данных:
      /// <tm_AttrOptimized>
      /// Нет
      /// </tm_AttrOptimized>

      // РЕКВИЗИТ: op-transaction (формула) #1
      @op-transaction = SEARCH(INT(@OpTransaction))

      // РЕКВИЗИТ: op (формула) #2
      @op = SEARCH(?,"NE " + @OpFX)


      DO AFTER:
         IF @TypeOper THEN
           @Acct939 = @acct-db(10);
           @Curr939 = @currency(10);
           @Summ939 = @amt-cur(10);
           @Acct969 = @acct-cr(20);
           @Curr969 = @currency(20);
           @Summ969 = _if(@Curr969 == "", @amt-rub(20), @amt-cur(20));
         ELSE
           @Acct939 = @acct-db(20);
           @Curr939 = @currency(20);
           @Summ939 = _if(@Curr939 == "", @amt-rub(20), @amt-cur(20));
           @Acct969 = @acct-cr(10);
           @Curr969 = @currency(10);
           @Summ969 = @amt-cur(10);
         ENDIF;
      END AFTER.

   END TEMPLATE. // ШАБЛОН:   20  - КОНЕЦ

   130:
   DO TEMPLATE CLASS opf ACTION ЭкранныйВвод ROLE Ввод данных:
      /// <tm_AttrOptimized>
      /// Нет
      /// </tm_AttrOptimized>

      // РЕКВИЗИТ: acct-cat (константа) #1
      @acct-cat = [f]
      // РЕКВИЗИТ: doc-type (константа) #2
      @doc-type = [06]
      // РЕКВИЗИТ: doc-date (формула) #3
      @doc-date = ДАТА()

      // РЕКВИЗИТ: ins-date (формула) #4
      @ins-date = ДАТА()

      // РЕКВИЗИТ: op-value-date (формула) #5
      @op-value-date = ДАТА()

      // РЕКВИЗИТ: op-date (формула) #6
      @op-date = ДАТА()

      // РЕКВИЗИТ: due-date (формула) #7
      @due-date = ДАТА()

      // РЕКВИЗИТ: contract-date (формула) #8
      @contract-date = ДАТА()

      // РЕКВИЗИТ: order-pay (константа) #9
      @order-pay = [5]
      // РЕКВИЗИТ: op-status (константа) #10
      @op-status = [√]
      // РЕКВИЗИТ: details (формула) #12
      @details = @details1

      150:
      DO TEMPLATE CLASS op-entry ACTION ЭкранныйВвод ROLE op-entry1:
         // РЕКВИЗИТ: acct-db (формула) #1
         @acct-db = @Acct969

         // РЕКВИЗИТ: currency (формула) #2
         @currency = @Curr969

         // РЕКВИЗИТ: amt-cur (формула) #3
         @amt-cur = @Summ969

         // РЕКВИЗИТ: amt-rub (константа) #4
         @amt-rub = []
         // РЕКВИЗИТ: op-date (формула) #5
         @op-date = ДАТА()

         // РЕКВИЗИТ: value-date (формула) #6
         @value-date = ДАТА()

         // РЕКВИЗИТ: op-cod (константа) #7
         @op-cod = [000000]
         // РЕКВИЗИТ: acct-cat (константа) #8
         @acct-cat = [f]

      END TEMPLATE. // ШАБЛОН:   150  - КОНЕЦ

      160:
      DO TEMPLATE CLASS op-entry ACTION ЭкранныйВвод ROLE op-entry2:
         // РЕКВИЗИТ: acct-cr (формула) #1
         @acct-cr = @Acct939

         // РЕКВИЗИТ: currency (формула) #2
         @currency = @Curr939

         // РЕКВИЗИТ: amt-rub (константа) #4
         @amt-rub = []
         // РЕКВИЗИТ: amt-cur (формула) #4
         @amt-cur = @Summ939


      END TEMPLATE. // ШАБЛОН:   160  - КОНЕЦ


      DO AFTER:
         @details1 = @details(130)
                   + _if(@TypeOper, @amt-cur(150), @amt-cur(160)) + ")";
      END AFTER.

   END TEMPLATE. // ШАБЛОН:   130  - КОНЕЦ

   190:
   DO TEMPLATE CLASS opf ACTION Создание ROLE Ввод данных:
      /// <tm_AttrOptimized>
      /// Нет
      /// </tm_AttrOptimized>

      DO BEFORE:
         @TypeOper(0);
         
      END BEFORE.

      // РЕКВИЗИТ: acct-cat (константа) #1
      @acct-cat = [f]
      // РЕКВИЗИТ: doc-type (константа) #2
      @doc-type = [06]
      // РЕКВИЗИТ: doc-date (формула) #3
      @doc-date = ДАТА()

      // РЕКВИЗИТ: ins-date (формула) #4
      @ins-date = ДАТА()

      // РЕКВИЗИТ: op-value-date (формула) #5
      @op-value-date = ДАТА()

      // РЕКВИЗИТ: op-date (формула) #6
      @op-date = ДАТА()

      // РЕКВИЗИТ: due-date (формула) #7
      @due-date = ДАТА()

      // РЕКВИЗИТ: contract-date (формула) #8
      @contract-date = ДАТА()

      // РЕКВИЗИТ: order-pay (константа) #9
      @order-pay = [5]
      // РЕКВИЗИТ: op-status (константа) #10
      @op-status = [√]
      // РЕКВИЗИТ: doc-num (константа) #11
      @doc-num = []
      // РЕКВИЗИТ: details (формула) #12
      @details = @details1

      200:
      DO TEMPLATE CLASS op-entry ACTION Создание ROLE op-entry:
         // РЕКВИЗИТ: acct-db (формула) #1
         @acct-db = @Acct969

         // РЕКВИЗИТ: acct-cr (константа) #2
         @acct-cr = [99996810302200010001     @0000]
         // РЕКВИЗИТ: amt-cur (формула) #3
         @amt-cur = _if(@Curr969 == "",DEC(0),@Summ969)

         // РЕКВИЗИТ: amt-rub (формула) #4
         @amt-rub = _if(@Curr969 == "",@Summ969,@amt-rub(150))

         // РЕКВИЗИТ: currency (формула) #5
         @currency = @Curr969

         // РЕКВИЗИТ: value-date (формула) #6
         @value-date = ДАТА()

         // РЕКВИЗИТ: op-cod (константа) #7
         @op-cod = [000000]
         // РЕКВИЗИТ: op-date (формула) #8
         @op-date = ДАТА()

         // РЕКВИЗИТ: acct-cat (константа) #9
         @acct-cat = [f]

      END TEMPLATE. // ШАБЛОН:   200  - КОНЕЦ


   END TEMPLATE. // ШАБЛОН:   190  - КОНЕЦ

   220:
   DO TEMPLATE CLASS opf ACTION Создание ROLE Ввод данных:
      /// <tm_AttrOptimized>
      /// Нет
      /// </tm_AttrOptimized>

      DO BEFORE:
         @TypeOper(0);
      END BEFORE.

      // РЕКВИЗИТ: acct-cat (константа) #1
      @acct-cat = [f]
      // РЕКВИЗИТ: doc-type (константа) #2
      @doc-type = [06]
      // РЕКВИЗИТ: doc-date (формула) #3
      @doc-date = ДАТА()

      // РЕКВИЗИТ: ins-date (формула) #4
      @ins-date = ДАТА()

      // РЕКВИЗИТ: op-value-date (формула) #5
      @op-value-date = ДАТА()

      // РЕКВИЗИТ: op-date (формула) #6
      @op-date = ДАТА()

      // РЕКВИЗИТ: due-date (формула) #7
      @due-date = ДАТА()

      // РЕКВИЗИТ: contract-date (формула) #8
      @contract-date = ДАТА()

      // РЕКВИЗИТ: order-pay (константа) #9
      @order-pay = [5]
      // РЕКВИЗИТ: op-status (константа) #10
      @op-status = [√]
      // РЕКВИЗИТ: doc-num (константа) #11
      @doc-num = []
      // РЕКВИЗИТ: details (формула) #12
      @details = @details1

      230:
      DO TEMPLATE CLASS op-entry ACTION Создание ROLE op-entry:
         // РЕКВИЗИТ: acct-db (константа) #1
         @acct-db = [99997810602200010001     @0000]
         // РЕКВИЗИТ: acct-cr (формула) #2
         @acct-cr = @Acct939

         // РЕКВИЗИТ: amt-cur (формула) #3
         @amt-cur = _if(@Acct939 == "",DEC(0),@Summ939)

         // РЕКВИЗИТ: amt-rub (формула) #4
         @amt-rub = _if(@Curr939 == "",@Summ939,@amt-rub(160))

         // РЕКВИЗИТ: currency (формула) #5
         @currency = @Curr939

         // РЕКВИЗИТ: value-date (формула) #6
         @value-date = ДАТА()

         // РЕКВИЗИТ: op-cod (константа) #7
         @op-cod = [000000]
         // РЕКВИЗИТ: op-date (формула) #8
         @op-date = ДАТА()

         // РЕКВИЗИТ: acct-cat (константа) #9
         @acct-cat = [f]

      END TEMPLATE. // ШАБЛОН:   230  - КОНЕЦ


   END TEMPLATE. // ШАБЛОН:   220  - КОНЕЦ

   DO AFTER:
      MESSAGE('Обработка успешно завершена.',INFORMATION);
      STATUS('')
   END AFTER.

END TRANSACTION. // ТРАНЗАКЦИЯ FXSW2DAY_VAL - КОНЕЦ 
// ***************************************************************************




