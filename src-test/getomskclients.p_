/*
               Банковская интегрированная система БИСквит
    Copyright: 
     Filename: clientsomsk.p
      Comment: 
   Parameters: 
         Uses:
      Used by:
      Created: kam 
     Modified:    

АБС
phone
homephone
workphone
cellphone
phonestr
smsphone

БИС ФЛ
домашний
домашний факт
рабочий
сотовый
телефакс
ДР:
cell-phone
Телефон3
tel
phone-home

БИС ЮЛ
tel
Telex
Телефон
Телефакс(fax)

*/

/*&SCOPED-DEFINE DEBUG-LOG 1*/

ROUTINE-LEVEL ON ERROR UNDO, THROW.

&SCOPED-DEFINE ACTION_NEW_FROM_OM 1
&SCOPED-DEFINE ACTION_UPDATE_FROM_OM 2

&SCOPED-DEFINE VOLUME_UPPER 1

/* кол-во клиентов, загружаемых за один раз */
&SCOPED-DEFINE COUNT_CLIENTS 1000

&SCOPED-DEFINE STATUS_NULL ?
&SCOPED-DEFINE STATUS_OK 1
&SCOPED-DEFINE STATUS_OK_WITH_ERROR 2
&SCOPED-DEFINE STATUS_UNKNOW_ERROR -1
&SCOPED-DEFINE STATUS_DOC_NOT_FOUND -2
&SCOPED-DEFINE STATUS_CLIENT_NAME -3
&SCOPED-DEFINE STATUS_CLIENT_TYPE -4
&SCOPED-DEFINE STATUS_DUPLICATE_CLIENT -5
&SCOPED-DEFINE STATUS_CLIENT_NOT_FOUND -6
&SCOPED-DEFINE STATUS_ADR_NOT_FOUND -7
&SCOPED-DEFINE STATUS_ADR_ERROR -8
&SCOPED-DEFINE STATUS_INN_ERROR -9
&SCOPED-DEFINE STATUS_TYPEFORM_ERROR -10
&SCOPED-DEFINE STATUS_BIRTHDAY_ERROR -11
&SCOPED-DEFINE STATUS_CLIENT_FROM_BIS -12
&SCOPED-DEFINE STATUS_OGRN_ERROR -13
&SCOPED-DEFINE STATUS_DOC_ERROR -14

&SCOPED-DEFINE ERROR_DOC_NOT_FOUND "Не найден документ"
&SCOPED-DEFINE ERROR_DOC_TYPE "Некорректный тип документа"
&SCOPED-DEFINE ERROR_DOC_NUMBER "Некорректный номер/серия документа"
&SCOPED-DEFINE ERROR_DATEDOC "Ошибка в дате документа"
&SCOPED-DEFINE ERROR_DOC_UPDATE "Ошибка в занесении/обновлении документа"
&SCOPED-DEFINE ERROR_ADR_NOT_FOUND "Не найден адрес"
&SCOPED-DEFINE ERROR_ADR_UPDATE "Ошибка в занесении/обновлении адреса"
&SCOPED-DEFINE ERROR_CLIENT_NAME "Ошибка в наименовании клиента"
&SCOPED-DEFINE ERROR_CLIENT_TYPE "Ошибка в типе клиента"
&SCOPED-DEFINE ERROR_COUNTRY_NOT_FOUND "Неопределена страна клиента"
&SCOPED-DEFINE ERROR_ISSUE_EMPTY "Незаполнено поле выдан в документе"
&SCOPED-DEFINE ERROR_BIRTHDAY "Ошибка в дате рождения/регистрации клиента"
&SCOPED-DEFINE ERROR_DUPLICATE_CLIENT "Существует клиент с таким документом"
&SCOPED-DEFINE ERROR_CLIENT_NOT_FOUND "Не найден клиент для обновления"
&SCOPED-DEFINE ERROR_PERSON_CREATE "Не удалось создать клиента"
&SCOPED-DEFINE ERROR_INN "Неверный формат ИНН"
&SCOPED-DEFINE ERROR_OGRN "Незаполнено поле ОГРН"
&SCOPED-DEFINE ERROR_TYPEFORM "Ошибка в TYPEFORM"
&SCOPED-DEFINE ERROR_CLIENT_FROM_BIS "Клиент изначально из БИСа"

&SCOPED-DEFINE DOLRUK_IF_EMPTY "Директор"

{globals.i}
{intrface.get xclass}
{intrface.get widg}
{intrface.get db2l}
{intrface.get cust}
{pers.fun}
{getomskclients.fun}

DEFINE INPUT-OUTPUT PARAMETER iCurrentCount AS INT64 NO-UNDO.
DEFINE INPUT-OUTPUT PARAMETER iCountClients AS INT64 NO-UNDO. 
DEFINE OUTPUT PARAMETER bAllClients AS LOGICAL NO-UNDO.
DEFINE VAR barMessage AS CHAR NO-UNDO INIT "Загружаются клиенты ".
DEFINE VAR latStr AS CHAR INIT 'x,X,k,K,H,H' NO-UNDO CASE-SENSITIVE.
DEFINE VAR rusStr AS CHAR INIT 'х,Х,к,К,н,Н' NO-UNDO CASE-SENSITIVE.
DEF VAR vStartTime AS DATETIME NO-UNDO.
DEF VAR bChangeCID AS LOG NO-UNDO.
DEF VAR vUNKg AS CHAR NO-UNDO.

FUNCTION TO_LAT RETURN CHAR(
   INPUT iStr AS CHAR):
   DEF VAR ii AS INT NO-UNDO.
   DEF VAR ij AS INT NO-UNDO.

   DO ii = 1 TO LENGTH( iStr):
      ij = LOOKUP(SUBSTR( iStr, ii, 1), rusStr).
      IF ij > 0 THEN
         SUBSTR( iStr, ii, 1) = ENTRY( ij, latStr).
   END.
   RETURN iStr.
END.

FUNCTION TO_RUS RETURN CHAR(
   INPUT iStr AS CHAR):
   DEF VAR ii AS INT NO-UNDO.
   DEF VAR ij AS INT NO-UNDO.

   DO ii = 1 TO LENGTH( iStr):
      ij = LOOKUP(SUBSTR( iStr, ii, 1), latStr).
      IF ij > 0 THEN
         SUBSTR( iStr, ii, 1) = ENTRY( ij, rusStr).
   END.
   RETURN iStr.
END.

FUNCTION convertDoc2BIS RETURN CHAR(
   INPUT iDocType AS CHAR, 
   INPUT iDocSer AS CHAR, 
   INPUT iDocNum AS CHAR):

   iDocSer = TRIM( iDocSer).
   iDocNum = TRIM( iDocNum).
   IF iDocType EQ 'Паспорт'
      AND LENGTH( iDocSer) EQ 4 AND INDEX( iDocSer, ' ') < 1 THEN
      iDocSer = SUBSTRING(iDocSer,1,2) + ' ' + SUBSTRING(iDocSer,3).
   IF iDocSer EQ ? THEN iDocSer = "".
   IF iDocSer EQ "-" THEN iDocSer = "".
   IF iDocNum EQ ? THEN iDocNum = "".

   IF iDocType EQ 'Документ' THEN 
   DO:
      IF NUM-ENTRIES( iDocSer, ' ') EQ 2 THEN iDocSer = REPLACE ( iDocSer, ' ', '-').
      IF NUM-ENTRIES( iDocSer, '-') EQ 2 THEN 
      DO:
         ENTRY(1, iDocSer, '-') = TO_LAT(ENTRY( 1, iDocSer, '-')).
         ENTRY(2, iDocSer, '-') = TO_RUS(ENTRY( 2, iDocSer, '-')).
      END.
   END.

   IF iDocType EQ 'Паспорт' AND LENGTH( iDocSer) EQ 5 AND
      SUBSTR(iDocSer,1,1) EQ SUBSTR(iDocSer,2,1) AND
      SUBSTR(iDocSer,2,1) EQ SUBSTR(iDocSer,4,1) AND
      SUBSTR(iDocSer,4,1) EQ SUBSTR(iDocSer,5,1) THEN
      UNDO, THROW NEW Progress.Lang.AppError( "Серия паспорта не может состоять из одинаковых цифр").
	
   RETURN TRIM( iDocSer + ' ' + iDocNum).
END FUNCTION.

/*
FUNCTION DeDublPhone RETURN CHAR (
   INPUT iNewPhone AS CHAR,
   INPUT iAllPhones AS CHAR):
   DEF VAR uk AS INT NO-UNDO.
   DEF VAR iStr AS CHAR NO-UNDO.
   iStr = ''.
   DO uk = 1 TO NUM-ENTRIES( iNewPhone):
      IF ENTRY( uk, iNewPhone) NE "" AND LOOKUP(ENTRY( uk, iNewPhone), iAllPhones) EQ 0 THEN 
      DO:
         iStr = (IF iStr EQ '' THEN '' ELSE iStr + ',') + ENTRY( uk, iNewPhone).
      END.
   END.
   RETURN iStr.
END FUNCTION.
*/

FUNCTION DeDublPhone RETURN CHAR (
   INPUT iNewPhone AS CHAR,
   INPUT iAllPhones AS CHAR):
   DEF VAR uk AS INT NO-UNDO.
   DEF VAR iStr AS CHAR NO-UNDO.
   iStr = ''.
   IF NUM-ENTRIES(iAllPhones) NE 0 THEN
   DO uk = 1 TO NUM-ENTRIES( iAllPhones):
      IF LOOKUP(iNewPhone,iAllPhones) EQ 0 THEN 
      DO:
         iStr = iAllPhones + "," + iNewPhone. 
      END.
      ELSE iStr = TRIM(iAllPhones,",").
   END.
   ELSE iStr = iNewPhone.
   RETURN iStr.
END FUNCTION.

/*IF iCurrentCount = 0 THEN                                         */
/*DO ON ERROR UNDO, THROW:                                          */
/*    SELECT COUNT(*) INTO iCountClients FROM bank.clients-mfr WHERE*/
/*        (   bank.clients-mfr.action = {&ACTION_NEW_FROM_OM}       */
/*         OR bank.clients-mfr.action = {&ACTION_UPDATE_FROM_OM})   */
/*        AND bank.clients-mfr.status_ IS NULL.                     */
/*                                                                  */
/*END.                                                              */

iCurrentCount = 0.

FOR EACH bank.clients-mfr WHERE 
     (bank.clients-mfr.action = {&ACTION_NEW_FROM_OM}
   OR bank.clients-mfr.action = {&ACTION_UPDATE_FROM_OM})
   AND bank.clients-mfr.status_ = {&STATUS_NULL}
   NO-LOCK:
   iCurrentCount = iCurrentCount + 1.
END.

PUT UNFORMATTED "Begin - iCurrentCount = " + STRING(iCurrentCount) SKIP.

DEFINE VARIABLE mHandle AS INT64     NO-UNDO.
DEFINE VARIABLE mUser   AS CHARACTER NO-UNDO.

mUser = "SYNC/Syncov".

RUN STORED-PROC qbis.send-sql-statement mHandle = PROC-HANDLE
   ("Select IGP.Set_User_Info('" + mUser + "') from dual").

FOR EACH qbis.proc-text-buffer WHERE PROC-HANDLE = mHandle:
/*   PUT UNFORMATTED proc-text SKIP.*/
END.

IF ERROR-STATUS:ERROR
   THEN
DO:
   PUT UNFORMATTED "Ошибка заполнения User_Info." SKIP.
END.
ELSE CLOSE STORED-PROCEDURE qbis.send-sql-statement WHERE PROC-HANDLE = mHandle.

/* основные реквизиты */
DEFINE VAR iCid AS INT64 NO-UNDO.
DEFINE VAR iBisId AS INT64 NO-UNDO.

DEFINE VAR iTypeCl AS INT64 NO-UNDO.
DEFINE VAR strAdressType AS CHAR NO-UNDO.
DEFINE VAR dateAdressOpen AS DATE NO-UNDO.
DEFINE VAR dateAdressClose AS DATE NO-UNDO.
DEFINE VAR strAdress AS CHAR NO-UNDO.
DEFINE VAR strKodReg AS CHAR NO-UNDO.
DEFINE VAR dateBirthDay AS DATE NO-UNDO.
DEFINE VAR strCountryId AS CHAR NO-UNDO.
DEFINE VAR strDocument AS CHAR NO-UNDO.
DEFINE VAR strDocumentId AS CHAR NO-UNDO.
DEFINE VAR strIssueCl AS CHAR NO-UNDO.
DEFINE VAR strIssueDoc AS CHAR NO-UNDO.
DEFINE VAR strKodPodr AS CHAR NO-UNDO.
DEFINE VAR dateOpenTime AS DATE NO-UNDO.
DEFINE VAR dateOpenDoc AS DATE NO-UNDO.
DEFINE VAR dateCloseDoc AS DATE NO-UNDO.
DEFINE VAR strFirstNames AS CHAR NO-UNDO. /* fullname  для Юр.лица */
DEFINE VAR strNameLast AS CHAR NO-UNDO.   /* shortname для Юр.лица */
DEFINE VAR bGender AS LOGICAL NO-UNDO.
DEFINE VAR strInn AS CHAR NO-UNDO.
DEFINE VAR strOgrn AS CHAR NO-UNDO.
DEFINE VAR strPhone AS CHAR NO-UNDO.
DEFINE VAR strTaxInsp AS CHAR NO-UNDO.
DEFINE VAR bCreated AS LOGICAL NO-UNDO.
DEFINE VAR strCustCat AS CHAR NO-UNDO.
DEFINE VAR strFormType AS CHAR NO-UNDO.
DEFINE VAR strDolRuk AS CHAR NO-UNDO.
DEFINE VAR strClientType AS CHAR NO-UNDO.
DEFINE VAR strBranchId AS CHAR NO-UNDO.
DEFINE VAR strSerNal AS CHAR NO-UNDO.
DEFINE VAR strNumNal AS CHAR NO-UNDO.

DEFINE VAR strStatusAdr AS CHAR NO-UNDO.
DEFINE VAR txtErr AS CHAR NO-UNDO.
DEFINE VAR j AS INT64 NO-UNDO. /* для cust-pri.cr */
DEFINE VAR tmpInt AS INT64 NO-UNDO.
DEFINE VAR tmpStr AS CHAR NO-UNDO.
DEFINE VAR clActionStatus AS INT64 NO-UNDO. /* 0 - клиент из биса(ничего не делаем), 1 - новый из омскАБС, 2 - update из ОмскАбс */ 
DEFINE VAR countClients AS INT64 NO-UNDO.
DEFINE VAR iTime AS INT64 NO-UNDO.
DEFINE VAR strPhone1 AS CHAR NO-UNDO.
DEFINE VAR strPhone2 AS CHAR NO-UNDO.
DEFINE VAR strPhoneOther AS CHAR NO-UNDO.

DEFINE TEMP-TABLE doc-mfr NO-UNDO
   LIKE bank.documents-mfr
   .
DEFINE TEMP-TABLE doc-mfr2 NO-UNDO
   LIKE bank.documents-mfr
   .
DEFINE TEMP-TABLE adr-mfr NO-UNDO
   LIKE bank.adress-mfr
   .

bChangeCID = FALSE.
countClients = 0.
vStartTime = NOW.
bAllClients = TRUE.
FOR EACH bank.clients-mfr
   WHERE 
   (bank.clients-mfr.action = {&ACTION_NEW_FROM_OM}
   OR bank.clients-mfr.action = {&ACTION_UPDATE_FROM_OM})
   AND bank.clients-mfr.status_ = {&STATUS_NULL}
   EXCLUSIVE-LOCK BY bank.clients-mfr.id ON ERROR UNDO, THROW:

/*   PUT UNFORMATTED STRING(NOW,"99/99/9999 HH:MM:SS") + " begin CID = " + STRING(bank.clients-mfr.cid) SKIP.*/

    {empty doc-mfr}
   FOR EACH bank.documents-mfr
      WHERE bank.documents-mfr.clientid = bank.clients-mfr.id NO-LOCK:
      CREATE doc-mfr.
      BUFFER-COPY bank.documents-mfr TO doc-mfr.
   END.

    {empty doc-mfr2}
    
   FIND FIRST bank.clients-abs where clients-abs.cid EQ bank.clients-mfr.cid NO-LOCK NO-ERROR.
   IF NOT AVAIL clients-abs THEN
   DO:
      PUT UNFORMATTED "CID = " + STRING(bank.clients-mfr.cid) + " не найден в bank.clients-abs." SKIP.
      NEXT.
   END.
   
   DEF VAR dv AS INT NO-UNDO.
   FOR EACH bank.expdoc
      WHERE expdoc.did = clients-abs.did
      AND (expdoc.field_ = 139 OR
      expdoc.field_ = 140 OR
      expdoc.field_ = 204 OR
      expdoc.field_ = 205 OR
      expdoc.field_ = 206 OR
      expdoc.field_ = 619) NO-LOCK:
      dv = (IF expdoc.volume EQ ? THEN 1 ELSE expdoc.volume).
        
      IF dv NE 1 THEN NEXT.
        
      FIND FIRST doc-mfr2 WHERE doc-mfr2.volume = dv NO-ERROR.
      IF NOT AVAIL doc-mfr2 THEN 
      DO:
         CREATE doc-mfr2.
         ASSIGN
            doc-mfr2.id       = dv
            doc-mfr2.volume   = dv
            doc-mfr2.clientid = bank.clients-mfr.id
            .
      END.
        
      CASE expdoc.field_:
         WHEN 139 THEN 
            doc-mfr2.placedoc    = expdoc.contain.
         WHEN 140 THEN 
            doc-mfr2.docopendate = DATE(expdoc.contain) NO-ERROR.
         WHEN 204 THEN 
            DO:
               FIND FIRST bank.glossary
                  WHERE glossary.TYPE = 42 AND glossary.gid = INTEGER(expdoc.contain) NO-LOCK NO-ERROR.
               doc-mfr2.doctype     = (IF AVAIL bank.glossary THEN bank.glossary.sname ELSE "").
               IF doc-mfr2.doctype EQ "Паспорт РФ"          THEN doc-mfr2.doctype = "Паспорт".
               IF doc-mfr2.doctype EQ "Паспорт СССР"        THEN doc-mfr2.doctype = "Документ".
               IF doc-mfr2.doctype EQ "Иностранный паспорт" THEN doc-mfr2.doctype = "ДокНерез".
               IF doc-mfr2.doctype EQ "Вр.уд.личн.гражд.РФ" THEN doc-mfr2.doctype = "ВремУдРФ".
               IF doc-mfr2.doctype EQ "Cвидетельство о предоставлении временного убежища" THEN doc-mfr2.doctype = "СвВрУб".
               IF doc-mfr2.doctype EQ "Вид на жительство" THEN doc-mfr2.doctype = "ВидНаЖит".
               IF doc-mfr2.doctype EQ "Загранпаспорт РФ" THEN doc-mfr2.doctype = "ЗагрПаспорт".
               IF doc-mfr2.doctype EQ "Свидетельство о рождении" THEN doc-mfr2.doctype = "СвидРожд".
               IF doc-mfr2.doctype EQ "Удостоверение личности офицера" THEN doc-mfr2.doctype = "УдостОфицер".
               IF doc-mfr2.doctype EQ "Военный билет" THEN doc-mfr2.doctype = "ВоенныйБилет".
               RELEASE bank.glossary.
            END.
         WHEN 205 THEN 
            doc-mfr2.docnumber   = expdoc.contain.
         WHEN 206 THEN 
            doc-mfr2.docseria    = expdoc.contain.
         WHEN 619 THEN 
            doc-mfr2.dockodpodr  = expdoc.contain.
      END.
   END.
   RELEASE bank.clients-abs.
    
   FOR EACH doc-mfr WHERE doc-mfr.doctype NE "МиграцКарта":
      FIND FIRST doc-mfr2 WHERE doc-mfr2.volume = doc-mfr.volume NO-ERROR.
      IF NOT AVAIL doc-mfr2 THEN 
      DO:
         PUT UNFORMATTED doc-mfr.clientid ":не найден документ volume=" doc-mfr.volume SKIP.
         NEXT.
      END.
      IF doc-mfr2.placedoc NE doc-mfr.placedoc THEN
         PUT UNFORMATTED doc-mfr.clientid ":" doc-mfr2.placedoc "<>" doc-mfr.placedoc SKIP.
      IF doc-mfr2.docopendate NE doc-mfr.docopendate THEN
         PUT UNFORMATTED doc-mfr.clientid ":" doc-mfr2.docopendate "<>" doc-mfr.docopendate SKIP.
      IF doc-mfr2.doctype NE doc-mfr.doctype THEN
         PUT UNFORMATTED doc-mfr.clientid ":" doc-mfr2.doctype "<>" doc-mfr.doctype SKIP.
      IF doc-mfr2.docnumber NE doc-mfr.docnumber THEN
         PUT UNFORMATTED doc-mfr.clientid ":" doc-mfr2.docnumber "<>" doc-mfr.docnumber SKIP.
      IF doc-mfr2.docseria NE doc-mfr.docseria THEN
         PUT UNFORMATTED doc-mfr.clientid ":" doc-mfr2.docseria "<>" doc-mfr.docseria SKIP.
      IF doc-mfr2.dockodpodr NE doc-mfr.dockodpodr THEN
         PUT UNFORMATTED doc-mfr.clientid ":" doc-mfr2.dockodpodr "<>" doc-mfr.dockodpodr SKIP.
   END.
    
   FOR EACH doc-mfr2
      WHERE doc-mfr2.doctype NE "МиграцКарта" /*EQ "Паспорт"*/ 
      AND doc-mfr2.docnumber NE ? AND doc-mfr2.docnumber NE ""
      NO-LOCK:
       
      FIND FIRST doc-mfr WHERE doc-mfr.volume = doc-mfr2.volume AND doc-mfr.doctype = doc-mfr2.doctype NO-ERROR.
      IF NOT AVAIL doc-mfr THEN 
      DO:
         CREATE doc-mfr.
         BUFFER-COPY doc-mfr2 TO doc-mfr.
         PUT UNFORMATTED doc-mfr.clientid ": CID=" bank.clients-mfr.cid " добавили "
            doc-mfr2.doctype " " doc-mfr2.docseria " " doc-mfr2.docnumber " volume=" doc-mfr2.volume SKIP.
      END.
   END.
    
   {empty adr-mfr}
   FOR EACH bank.adress-mfr
      WHERE bank.adress-mfr.clientid = bank.clients-mfr.id NO-LOCK:
      CREATE adr-mfr.
      BUFFER-COPY bank.adress-mfr TO adr-mfr.
   END.
    
   iTime = MTIME.
   MYNEXT:
   DO ON ERROR UNDO, THROW:
      txtErr = "". 
      iCid = bank.clients-mfr.cid.
      iBisId = bank.clients-mfr.bisid.
      iTypeCl = bank.clients-mfr.subjectype.
      clActionStatus = 0.
      bCreated = FALSE.
      /*
              0 Юридическое лицо
              1 Физическое лицо
              2 Банк
              3 Индивидуальный предприниматель
      */
/*      PUT UNFORMATTED                                    */
/*         "bank.clients-mfr.id = " bank.clients-mfr.id ";"*/
/*         "CID = " iCid ";"                               */
/*         "bisid = " iBisId ";"                           */
/*         "iTypeCl = " iTypeCl ";"                        */
/*         "clActionStatus = " clActionStatus ";"          */
/*      SKIP.                                              */
      
      IF iTypeCl = 1 OR iTypeCl = 3 THEN
         strCustCat = 'Ч'.
      ELSE IF iTypeCl = 0 THEN
            strCustCat = 'Ю'.
      ELSE
      DO:
/*         PUT UNFORMATTED "CID = " + STRING(bank.clients-mfr.cid) + " тип клиента " + STRING(iTypeCl) + " не обрабатывается." SKIP.*/
         NEXT.
      END.  

      PUT UNFORMATTED STRING( NOW, "99/99/99 HH:MM:SS") + " (" + STRING( bank.clients-mfr.id) + ") ==== начало обработки ====" SKIP.
      PUT UNFORMATTED 
         "bank.clients-mfr.id = " bank.clients-mfr.id ";"
         "CID = " iCid ";"
         "bisid = " iBisId ";"
         "iTypeCl = " iTypeCl ";"
         "clActionStatus = " clActionStatus ";"
      SKIP.
        
      /* филиал клиента */
      strBranchId = IF bank.clients-mfr.branchid EQ '0100' THEN '0500' ELSE bank.clients-mfr.branchid.
      IF strBranchId EQ ? OR TRIM(strBranchId) EQ "" THEN strBranchId = "0400".
      IF LENGTH(strBranchId) = 3 THEN strBranchId = '0' + strBranchId.
      DO WHILE TRUE ON ERROR UNDO, THROW:
         FIND FIRST branch
            WHERE branch.branch-id EQ strBranchId NO-LOCK NO-ERROR.
         IF NOT AVAIL branch OR CAN-DO( "10,11", branch.branch-type) THEN LEAVE.
         strBranchId = branch.parent-id.
      END.
      IF NOT AVAIL branch THEN strBranchId = '0400'.
        
      if shFilial NE strBranchId THEN 
      DO ON ERROR UNDO, THROW:
         shFilial = strBranchId.
         &IF DEFINED( DEBUG-LOG) &THEN 
         PUT UNFORMATTED '    + смена тек филиала на ' + shFilial SKIP. &ENDIF
		
      END.

	   &IF DEFINED( DEBUG-LOG) &THEN 
      PUT UNFORMATTED "    + ищем клиента" SKIP. &ENDIF
      /*===== ищем клиента =====*/
      RELEASE person.
      RELEASE cust-corp.
      IF (iTypeCl = 1 OR iTypeCl = 3) THEN 
      DO: /* ФЛ ИП */
         /* ищем по ДР CID */
         IF iTypeCl = 1 THEN
            FIND FIRST signs
               WHERE signs.file-name = 'person'
               AND signs.dec-value = iCid
               AND signs.code = 'CID' NO-LOCK NO-ERROR.
         ELSE
            FIND FIRST signs
               WHERE signs.file-name = 'person'
               AND signs.dec-value = iCid
               AND signs.code = 'CIDIP' NO-LOCK NO-ERROR.
         IF AVAIL signs THEN 
         DO:
            PUT UNFORMATTED
               "CID = " iCid ";"
               "signs.surrogate = " signs.surrogate ";"
               SKIP.
            FIND FIRST person
               WHERE person.person-id = INTEGER( signs.surrogate) EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
            IF NOT AVAIL person AND LOCKED person
               THEN UNDO, THROW NEW Progress.Lang.AppError( "клиент person-id=" + signs.surrogate + ' заблокирован другим пользователем').
            IF NOT AVAIL person
               THEN UNDO, THROW NEW Progress.Lang.AppError( "не найден клиент с person-id=" + STRING( iBisId)
                  + " похоже потерянная запись signs с CID=" + STRING(signs.dec-value)).
         END.
         /* ищем по iBisId */
         IF NOT AVAIL person AND
            iBisId NE ? AND iBisId > 0 THEN 
         DO:
            FIND FIRST person
               WHERE person.person-id = iBisId EXCLUSIVE-LOCK NO-ERROR NO-WAIT.
            IF NOT AVAIL person AND LOCKED person
               THEN UNDO, THROW NEW Progress.Lang.AppError( "клиент person-id=" + STRING( iBisId) + ' заблокирован другим пользователем').
         END.
    	   
         iBisId = (IF AVAIL(person) THEN person.person-id ELSE ?).
         clActionStatus = IF AVAIL(person) THEN 2 /* 2 - update из ОмскАбс */ 
         ELSE 1 /* 1 - новый из омскАБС */ .
         PUT UNFORMATTED
            "AVAIL(person) = " AVAIL(person) ";"
            "iBisId = " iBisId ";"
            SKIP.
      END. 
      ELSE IF iTypeCl = 0 THEN 
         DO: /* ЮЛ */
            /* ищем по iBisId */
            IF iBisId NE ?
               AND iBisId > 0 THEN 
            DO ON ERROR UNDO, THROW:
               FIND FIRST cust-corp
                  WHERE cust-corp.cust-id = iBisId EXCLUSIVE-LOCK NO-ERROR.
               IF NOT AVAIL cust-corp AND LOCKED cust-corp
                  THEN UNDO, THROW NEW Progress.Lang.AppError( "клиент cust-id=" + STRING( iBisId) + ' заблокирован другим пользователем').
               IF NOT AVAIL cust-corp
                  THEN UNDO, THROW NEW Progress.Lang.AppError( "не найден клиент с cust-id=" + STRING( iBisId) ).
            END.
            /* ищем по ДР CID */
            FIND FIRST signs
               WHERE signs.file-name = 'cust-corp'
               AND signs.dec-value = iCid
               AND signs.code = 'CID' SHARE-LOCK NO-ERROR.
            IF AVAIL signs THEN 
            DO ON ERROR UNDO, THROW:
               IF AVAIL cust-corp AND signs.surrogate NE STRING(cust-corp.cust-id)
                  THEN UNDO, THROW NEW Progress.Lang.AppError( "CID=" + STRING( iCid) + " найден у другого клиента(cust-id=" + signs.surrogate +
                     " вместо cust-id=" + STRING(cust-corp.cust-id)).
               IF NOT AVAIL cust-corp THEN 
               DO ON ERROR UNDO, THROW:
                  FIND FIRST cust-corp
                     WHERE cust-corp.cust-id = INTEGER( signs.surrogate) EXCLUSIVE-LOCK NO-ERROR.
                  IF NOT AVAIL cust-corp AND LOCKED cust-corp
                     THEN UNDO, THROW NEW Progress.Lang.AppError( "клиент cust-id=" + signs.surrogate + ' заблокирован другим пользователем').
                  IF NOT AVAIL cust-corp
                     THEN UNDO, THROW NEW Progress.Lang.AppError( "не найден клиент с cust-id=" + STRING( iBisId)
                        + " похоже потерянная запись signs с CID=" + STRING(signs.dec-value)).
                  iBisId = cust-corp.cust-id.
               END.
            END.
            clActionStatus = IF AVAIL cust-corp THEN 2 /* 2 - update из ОмскАбс */ ELSE 1 /* 1 - новый из омскАБС */ .
         END. 
         ELSE UNDO, THROW NEW Progress.Lang.AppError( "не понятный тип клиента iTypeCl=" + STRING(iTypeCl) ).

      /*===== ищем по документу( или ИНН/КПП) и удостоверяемся что это именно тот клиент =====*/
      DEF VAR CheckedDoc AS LOG NO-UNDO.
      DEF VAR cntPriznak AS INT NO-UNDO.
      CheckedDoc = FALSE.
      cntPriznak = 0.
      IF (iTypeCl = 1 OR iTypeCl = 3) THEN 
      DO: /* ФЛ ИП */
	       
	       &IF DEFINED( DEBUG-LOG) &THEN 
         PUT UNFORMATTED "    + ищем по документу и удостоверяемся что это именно тот клиент" SKIP. 
          &ENDIF
         DEFINE VARIABLE mKD AS CHARACTER NO-UNDO.
         DEFINE VARIABLE mOkay AS LOGICAL NO-UNDO.
         FOR EACH doc-mfr WHERE
            doc-mfr.clientid = bank.clients-mfr.id NO-LOCK ON ERROR UNDO, THROW:
            tmpStr = convertDoc2BIS( doc-mfr.doctype, doc-mfr.docseria, doc-mfr.docnumber).
            mKD = TRIM(doc-mfr.doctype).
            mOkay = NO.

            PUT UNFORMATTED TRIM(doc-mfr.doctype) ";" TRIM(tmpStr) SKIP.

            FIND FIRST cust-ident WHERE 
               cust-ident.class-code     EQ "p-cust-ident"
               AND cust-ident.cust-cat       EQ "Ч"
               AND cust-ident.cust-code-type EQ TRIM(doc-mfr.doctype)
               AND cust-ident.cust-code      EQ TRIM(tmpStr)
               NO-LOCK NO-ERROR.

            PUT UNFORMATTED "AVAIL(cust-ident) = " AVAIL(cust-ident) SKIP.

            IF AVAIL(cust-ident) THEN
            DO ON ERROR UNDO, THROW:
               /*PUT UNFORMATTED "cust-ident.cust-id = " cust-ident.cust-id " ; person.person-id = " person.person-id SKIP.*/
               IF AVAIL person AND cust-ident.cust-id NE person.person-id
                  THEN UNDO, THROW NEW Progress.Lang.AppError( "документ " + doc-mfr.doctype +
                     " " + tmpStr +
                     ' клиента CID=' + STRING(iCid) + ' найден у другого клиента с person-id=' + STRING( iBisId) +
                     ".").
               IF NOT AVAIL person THEN 
               DO ON ERROR UNDO, THROW:
                  FIND FIRST person
                     WHERE person.person-id = cust-ident.cust-id EXCLUSIVE-LOCK NO-ERROR.
                  IF NOT AVAIL person AND LOCKED person
                     THEN UNDO, THROW NEW Progress.Lang.AppError( "клиент person-id=" + STRING( cust-ident.cust-id) + ' заблокирован другим пользователем').
                  IF NOT AVAIL person THEN UNDO, THROW NEW Progress.Lang.AppError(
                        "потерянная запись cust-ident с cust-id=" + STRING( cust-ident.cust-id) + " cust-cat=Ч").
			          &IF DEFINED( DEBUG-LOG) &THEN 
                  PUT UNFORMATTED "    + нашли клиента по документу" +
                     doc-mfr.doctype + " " + tmpStr SKIP. 
                   &ENDIF
			     
                  DEF VAR tmpStr2 AS CHAR NO-UNDO.
                  tmpStr2 = GetXattrValueEx( "person", STRING( person.person-id), (IF iTypeCl = 1 THEN "CID" ELSE "CIDIP"), STRING(iCid)).
                  IF tmpStr2 EQ "-1" THEN tmpStr2 = STRING(iCid).
                  IF AVAIL person
                     AND tmpStr2 NE STRING(iCid)
                     THEN UNDO, THROW NEW Progress.Lang.AppError( "документ " + doc-mfr.doctype +
                        " " + tmpStr + " найден у клиента person-id=" + STRING( person.person-id) +
                        " с CID=" + tmpStr2 /* GetXattrValueEx( "person", STRING( person.person-id), "CID", STRING(iCid)) */ +
                        " вместо " + STRING(iCid)).
                  iBisId = IF AVAIL person THEN person.person-id ELSE ?.
               END.
               CheckedDoc = TRUE.
            END.
            ELSE
               CheckedDoc = TRUE.
         END.
          
         PUT UNFORMATTED "CheckedDoc = " CheckedDoc SKIP.
          
         IF AVAIL person THEN 
         DO ON ERROR UNDO, THROW:
            IF NOT CheckedDoc
               THEN UNDO, THROW NEW Progress.Lang.AppError(' клиент не имеет общих документов с клиентом person-id=' + (IF iBisId <> ? THEN STRING( iBisId) ELSE "?")).
    	        
            DEF VAR uii AS INT NO-UNDO.
            IF bank.clients-mfr.fname BEGINS "Нотариус" THEN
            DO:
               DEFINE VARIABLE mANP AS CHARACTER NO-UNDO.
               mANP = REPLACE(bank.clients-mfr.fname,"Нотариус ","").
               DO uii = 1 TO NUM-ENTRIES(mANP,' '):
                  IF NUM-ENTRIES(person.name-last + ' ' + person.first-names,' ') >= uii
                     AND ENTRY(uii,mANP,' ') EQ ENTRY(uii,person.name-last + ' ' + person.first-names,' ')
                     THEN cntPriznak = cntPriznak + 1.
               END.
               PUT UNFORMATTED
                  "person = " person.name-last + ' ' + person.first-names ";"
                  "mANP = " mANP ";"
                  "cntPriznak = " cntPriznak
                  SKIP.
            END.
            ELSE IF bank.clients-mfr.fname BEGINS "Адвокат" THEN
               DO:
                  mANP = REPLACE(bank.clients-mfr.fname,"Адвокат ","").
                  DO uii = 1 TO NUM-ENTRIES(mANP,' '):
                     IF NUM-ENTRIES(person.name-last + ' ' + person.first-names,' ') >= uii
                        AND ENTRY(uii,mANP,' ') EQ ENTRY(uii,person.name-last + ' ' + person.first-names,' ')
                        THEN cntPriznak = cntPriznak + 1.
                  END.
                  PUT UNFORMATTED
                     "person = " person.name-last + ' ' + person.first-names ";"
                     "mANP = " mANP ";"
                     "cntPriznak = " cntPriznak
                     SKIP.
               END.
               ELSE IF bank.clients-mfr.fname BEGINS "Предприниматель" THEN
                  DO:
                     mANP = REPLACE(bank.clients-mfr.fname,"Предприниматель ","").
                     DO uii = 1 TO NUM-ENTRIES(mANP,' '):
                        IF NUM-ENTRIES(person.name-last + ' ' + person.first-names,' ') >= uii
                           AND ENTRY(uii,mANP,' ') EQ ENTRY(uii,person.name-last + ' ' + person.first-names,' ')
                           THEN cntPriznak = cntPriznak + 1.
                     END.
                     PUT UNFORMATTED
                        "person = " person.name-last + ' ' + person.first-names ";"
                        "mANP = " mANP ";"
                        "cntPriznak = " cntPriznak
                        SKIP.
                  END.
                  ELSE IF bank.clients-mfr.fname BEGINS "Частный предприниматель" THEN
                     DO:
                        mANP = REPLACE(bank.clients-mfr.fname,"Частный предприниматель ","").
                        DO uii = 1 TO NUM-ENTRIES(mANP,' '):
                           IF NUM-ENTRIES(person.name-last + ' ' + person.first-names,' ') >= uii
                              AND ENTRY(uii,mANP,' ') EQ ENTRY(uii,person.name-last + ' ' + person.first-names,' ')
                              THEN cntPriznak = cntPriznak + 1.
                        END.
                        PUT UNFORMATTED
                           "person = " person.name-last + ' ' + person.first-names ";"
                           "mANP = " mANP ";"
                           "cntPriznak = " cntPriznak
                           SKIP.
                     END.
                     ELSE IF bank.clients-mfr.fname BEGINS "(Глава КФХ)" THEN
                        DO:
                           mANP = REPLACE(bank.clients-mfr.fname,"(Глава КФХ) ","").
                           DO uii = 1 TO NUM-ENTRIES(mANP,' '):
                              IF NUM-ENTRIES(person.name-last + ' ' + person.first-names,' ') >= uii
                                 AND ENTRY(uii,mANP,' ') EQ ENTRY(uii,person.name-last + ' ' + person.first-names,' ')
                                 THEN cntPriznak = cntPriznak + 1.
                           END.
                           PUT UNFORMATTED
                              "person = " person.name-last + ' ' + person.first-names ";"
                              "mANP = " mANP ";"
                              "cntPriznak = " cntPriznak
                              SKIP.
                        END.
                        ELSE IF bank.clients-mfr.fname BEGINS "Глава КФХ" THEN
                        DO:
                           mANP = REPLACE(bank.clients-mfr.fname,"Глава КФХ ","").
                           DO uii = 1 TO NUM-ENTRIES(mANP,' '):
                              IF NUM-ENTRIES(person.name-last + ' ' + person.first-names,' ') >= uii
                                 AND ENTRY(uii,mANP,' ') EQ ENTRY(uii,person.name-last + ' ' + person.first-names,' ')
                                 THEN cntPriznak = cntPriznak + 1.
                           END.
                           PUT UNFORMATTED
                              "person = " person.name-last + ' ' + person.first-names ";"
                              "mANP = " mANP ";"
                              "cntPriznak = " cntPriznak
                              SKIP.
                        END.
                        ELSE IF bank.clients-mfr.fname BEGINS "глава крестьянского (фермерского) хозяйства" THEN
                        DO:
                           mANP = REPLACE(bank.clients-mfr.fname,"глава крестьянского (фермерского) хозяйства ","").
                           DO uii = 1 TO NUM-ENTRIES(mANP,' '):
                              IF NUM-ENTRIES(person.name-last + ' ' + person.first-names,' ') >= uii
                                 AND ENTRY(uii,mANP,' ') EQ ENTRY(uii,person.name-last + ' ' + person.first-names,' ')
                                 THEN cntPriznak = cntPriznak + 1.
                           END.
                           PUT UNFORMATTED
                              "person = " person.name-last + ' ' + person.first-names ";"
                              "mANP = " mANP ";"
                              "cntPriznak = " cntPriznak
                              SKIP.
                        END.
                        
                        ELSE IF bank.clients-mfr.fname BEGINS 'Глава КХ "Щелкановское"' THEN
                        DO:
                           mANP = REPLACE(bank.clients-mfr.fname,'Глава КХ "Щелкановское" ',"").
                           DO uii = 1 TO NUM-ENTRIES(mANP,' '):
                              IF NUM-ENTRIES(person.name-last + ' ' + person.first-names,' ') >= uii
                                 AND ENTRY(uii,mANP,' ') EQ ENTRY(uii,person.name-last + ' ' + person.first-names,' ')
                                 THEN cntPriznak = cntPriznak + 1.
                           END.
                           PUT UNFORMATTED
                              "person = " person.name-last + ' ' + person.first-names ";"
                              "mANP = " mANP ";"
                              "cntPriznak = " cntPriznak
                              SKIP.
                        END.             
                        ELSE
                        DO uii = 1 TO NUM-ENTRIES( bank.clients-mfr.fname, ' '):
                           IF NUM-ENTRIES( person.name-last + ' ' + person.first-names, ' ') >= uii AND
                              ENTRY( uii, bank.clients-mfr.fname, ' ') EQ ENTRY( uii, person.name-last + ' ' + person.first-names, ' ')
                              THEN cntPriznak = cntPriznak + 1.
                        END.
            ASSIGN
               cntPriznak = cntPriznak + 1
               WHEN bank.clients-mfr.birthdate = person.birthday
               .
            ASSIGN
               cntPriznak = cntPriznak + 1
               WHEN (IF person.gender THEN "М" ELSE "Ж") EQ Convert2Gender( bank.clients-mfr.fname, bank.clients-mfr.sex)
               .
/*            PUT UNFORMATTED "1 strFirstNames = " + strFirstNames ";" tmpInt SKIP.*/
            IF cntPriznak < 4
               THEN UNDO, THROW NEW Progress.Lang.AppError( 'клиент CID=' + STRING(iCid) +
                  ' не имеет достаточно общих признаков (ФИО, дата рождения, пол) с person-id=' + STRING( person.person-id)).
         END.
      END. 
      ELSE IF /* AVAIL cust-corp AND*/ iTypeCl = 0 THEN 
         DO ON ERROR UNDO, THROW: /* ЮЛ */
            cntPriznak = 0.
            IF AVAIL cust-corp THEN 
            DO:
               ASSIGN
                  cntPriznak = cntPriznak + 1
                  WHEN bank.clients-mfr.inn EQ cust-corp.inn.
               ASSIGN
                  cntPriznak = cntPriznak + 1
                  WHEN bank.clients-mfr.kpp EQ GetXattrValueEx( "cust-corp", STRING( cust-corp.cust-id), "КПП", "").
               ASSIGN
                  cntPriznak = cntPriznak + 1
                  WHEN bank.clients-mfr.ogrn EQ GetXattrValueEx( "cust-corp", STRING( cust-corp.cust-id), "ОГРН", "").
               ASSIGN
                  cntPriznak = cntPriznak + 1
                  WHEN cust-corp.name-corp EQ bank.clients-mfr.fname.
               ASSIGN
                  cntPriznak = cntPriznak + 1
                  WHEN cust-corp.name-short EQ bank.clients-mfr.sname.
               ASSIGN
                  cntPriznak = cntPriznak + 1
                  WHEN cust-corp.tax-insp EQ STRING( bank.clients-mfr.taxid).
               IF cntPriznak < 3
                  THEN UNDO, THROW NEW Progress.Lang.AppError( 'клиент CID=' + STRING(iCid) +
                     ' мало общих признаков (ИНН, КПП,наим,к.наим.,фнс) с cust-id=' + STRING( cust-corp.cust-id)).
            END.
            /* клиента по связи не нашли, ищем по ИНН и КПП */
            IF NOT AVAIL cust-corp THEN 
            DO ON ERROR UNDO, THROW:
               FIND FIRST cust-corp WHERE cust-corp.inn EQ bank.clients-mfr.inn NO-ERROR.
               DO WHILE AVAIL cust-corp
                  ON ERROR UNDO, THROW:
                  IF bank.clients-mfr.kpp = "" OR bank.clients-mfr.kpp = "0"
                     OR bank.clients-mfr.kpp EQ GetXattrValueEx( "cust-corp", STRING( cust-corp.cust-id), "КПП", "")
                     THEN LEAVE.
                  FIND NEXT cust-corp WHERE cust-corp.inn EQ bank.clients-mfr.inn NO-ERROR.
               END.
               IF AVAIL cust-corp THEN iBisId = cust-corp.cust-id.
            END.
    	    
         END.

      /*===== проверяем надо ли синхронизировать =====*/
      &IF DEFINED( DEBUG-LOG) &THEN 
      PUT UNFORMATTED "    + проверяем надо ли синхронизировать" SKIP. &ENDIF
      IF AVAIL person AND (iTypeCl = 1 OR iTypeCl = 3) THEN 
      DO ON ERROR UNDO, THROW: /* ФЛ ИП */
         DEF VAR eText AS CHAR NO-UNDO.
         tmpStr = GetXAttrValueEx("person",STRING(iBisId),"syncOmskABS","Нет").
         IF tmpStr <> "Да" THEN 
         DO ON ERROR UNDO, THROW:
            /* если все данные будут совпадать, то это первоначальная загрузка */
            tmpStr = 'Да'.
            eText = "".
            FIND FIRST doc-mfr WHERE
               doc-mfr.clientid = bank.clients-mfr.id
               AND TRIM(doc-mfr.doctype) EQ person.document-id
               AND doc-mfr.volume EQ 1
               NO-LOCK NO-ERROR.
            IF (NOT AVAIL doc-mfr)
               OR person.document <> convertDoc2BIS( TRIM(doc-mfr.doctype), doc-mfr.docseria, doc-mfr.docnumber)
               OR person.document-id <> TRIM(doc-mfr.doctype)
               THEN 
            DO:
               
               tmpStr = 'Нет'.
               eText = (IF eText <> "" THEN eText + ";" ELSE "") +
                  "не совпал документ БИС(" + person.document-id + " " + person.document
                  + ") и АБС".
                  /*
                   + TRIM(doc-mfr.doctype) + " "
                  + convertDoc2BIS( TRIM(doc-mfr.doctype), doc-mfr.docseria, doc-mfr.docnumber)
                  .
                  */
            END.
    		   
            IF UPPER(bank.clients-mfr.fname) <> UPPER(person.name-last + ' ' + person.first-names)
               THEN 
            DO:
               tmpStr = 'Нет'.
               eText = (IF eText <> "" THEN eText + ";" ELSE "") + 
                  "не совпало ФИО".
            END.
    		   
            IF bank.clients-mfr.birthdate <> person.birthday
               THEN 
            DO: 
               tmpStr = 'Нет'.
               eText = (IF eText <> "" THEN eText + ";" ELSE "") + 
                  "не совпала дата рождения".
            END.
    		   
            IF UPPER(person.country-id) <> UPPER(bank.clients-mfr.countryid)
               THEN 
            DO: 
               tmpStr = 'Нет'.
               eText = (IF eText <> "" THEN eText + ";" ELSE "") + 
                  "не совпала страна".
            END.
    		   
            IF (bank.clients-mfr.inn NE ? AND bank.clients-mfr.inn NE "" AND person.inn NE ? AND person.inn NE "")
               AND bank.clients-mfr.inn <> person.inn
               THEN 
            DO: 
               tmpStr = 'Нет'. 
               eText = (IF eText <> "" THEN eText + ";" ELSE "") + 
                  "не совпал инн в БИС " + (IF person.inn EQ ? THEN "?" ELSE person.inn) + " и АБС " + (IF bank.clients-mfr.inn EQ ? THEN "?" ELSE bank.clients-mfr.inn).
            END.

            IF (IF person.gender THEN "М" 
            ELSE "Ж") <> Convert2Gender( bank.clients-mfr.fname, bank.clients-mfr.sex)
               THEN 
            DO: 
               tmpStr = 'Нет'. 
               eText = (IF eText <> "" THEN eText + ";" ELSE "") + 
                  "не совпал пол".
            END.
		
            FIND FIRST adr-mfr
               WHERE adr-mfr.clientid = bank.clients-mfr.id
               AND adr-mfr.adresstype = 'АдрПроп' NO-LOCK NO-ERROR.
            IF NOT AVAIL adr-mfr THEN 
            DO: 
               tmpStr = 'Нет'.
               eText = (IF eText <> "" THEN eText + ";" ELSE "") + 
                  "нет адреса прописки".
            END.
    		
            ELSE 
            DO ON ERROR UNDO, THROW:
               DEF VAR u1 AS CHAR NO-UNDO.
               DEF VAR u2 AS CHAR NO-UNDO.
               strAdress = ConvertAdress2BIS(TRIM(adr-mfr.adress)).
               u1 = ENTRY(3,strAdress,"|").
               u2 = person.address[1].
               /* IF NOT (ENTRY(3,strAdress,"|") BEGINS person.address[1]) */
               IF ENTRY(5,u1) <> ENTRY(5,u2) OR ENTRY(6,u1) <> ENTRY(6,u2) OR ENTRY(8,u1) <> ENTRY(8,u2) OR ( ENTRY(3,u1) <> "" AND ENTRY(3,u2) <> "" AND ENTRY(3,u1) <> ENTRY(3,u2))
                  THEN 
               DO:
                  tmpStr = 'Нет'.
                  eText = (IF eText <> "" THEN eText + ";" ELSE "") + 
                     "не совпал адрес прописки в БИС (" + 
                     (IF person.address[1] EQ ? THEN "?" ELSE person.address[1]) + 
                     ") и АБС (" + ENTRY(3,strAdress,"|") + ")".
               END.
    		    
               IF ENTRY(2,strAdress,"|") <> ''
                  AND GetXattrValueEx("person",STRING(person.person-id),"КодРегГНИ","") <> ENTRY(2,strAdress,"|")
                  THEN 
               DO: 
                  tmpStr = 'Нет'.
                  eText = (IF eText <> "" THEN eText + ";" ELSE "") + 
                     "не совпал код региона " + ENTRY(2,strAdress,"|") + "<>" + GetXattrValueEx("person",STRING(person.person-id),"КодРегГНИ","").
               END.
            END.
            IF tmpStr <> "Да" THEN
               UNDO, THROW NEW Progress.Lang.AppError( "требуется ручная синхронизация ФЛ (" + eText + ").").
        	&IF DEFINED( DEBUG-LOG) &THEN 
            PUT UNFORMATTED "    + клиент совпадает " + STRING( person.person-id) SKIP. &ENDIF
         END.
      END.
      IF AVAIL cust-corp AND (iTypeCl = 0) THEN 
      DO ON ERROR UNDO, THROW: /* ЮЛ */
         /* DEF VAR eText2 AS CHAR NO-UNDO. */
         tmpStr = GetXAttrValueEx("cust-corp",STRING(cust-corp.cust-id),"syncOmskABS","Нет").
         IF tmpStr <> "Да" THEN 
         DO ON ERROR UNDO, THROW:
            UNDO, THROW NEW Progress.Lang.AppError( "требуется ручная синхронизация ЮЛ.").
         END.
      END.

      IF iTypeCl = 1 OR iTypeCl = 3 THEN 
      DO ON ERROR UNDO, THROW:

         /* проверяем совпадение CID */
         IF AVAIL person THEN
         DO:
            IF iTypeCl = 1 THEN
            DO:
               tmpStr = GetXattrValueEx( "person", STRING( person.person-id),"CID", "-1").
               IF tmpStr NE "-1" AND STRING(bank.clients-mfr.cid) NE tmpStr
                  THEN UNDO, THROW NEW Progress.Lang.AppError( "у клиента person-id=" + STRING( person.person-id) +
                     " CID <> " + STRING(bank.clients-mfr.cid)).
            END.
            IF iTypeCl = 3 THEN
            DO:
               tmpStr = GetXattrValueEx( "person", STRING( person.person-id),"CID", "-1").
               IF tmpStr NE "-1" AND bank.clients-mfr.cidpers NE ? AND STRING(bank.clients-mfr.cidpers) NE tmpStr
                  THEN UNDO, THROW NEW Progress.Lang.AppError( "у клиента person-id=" + STRING( person.person-id) +
                     " CID <> " + STRING(bank.clients-mfr.cidpers)).
               tmpStr = GetXattrValueEx( "person", STRING( person.person-id)," ", "-1").
               IF tmpStr NE "-1" AND STRING(bank.clients-mfr.cid) NE tmpStr
                  THEN UNDO, THROW NEW Progress.Lang.AppError( "у клиента person-id=" + STRING( person.person-id) +
                     " CID <> " + STRING(bank.clients-mfr.cid)).
            END.
         END.


         IF AVAIL person THEN
         DO:
/*            IF person.person-id NE 738385 THEN*/
            IF person.person-id NE 715760 THEN
            DO:
               IF NOT CAN-DO("05*",strBranchId) THEN
               UNDO, THROW NEW Progress.Lang.AppError( "1 - не Омский клиент. person-id = " + 
                  STRING(person.person-id) + "; strBranchId = " + strBranchId).
            END.
         END.
      END. 
      ELSE IF iTypeCl = 0 THEN 
         DO ON ERROR UNDO, THROW:
            IF AVAIL cust-corp THEN 
            DO:
               /* кто создавал клиента */
               find first history
                  where history.modify eq 'C'
                  and history.file-name eq 'cust-corp'
                  and history.field-ref = string(cust-corp.cust-id)
                  and history.user-id = 'SYNC'
                  no-lock no-error.
               if not avail history then
                  UNDO, THROW NEW Progress.Lang.AppError( "2 - пока синхронизируем только Омских клиентов.").
            END.
         END. 
         ELSE
            UNDO, THROW NEW Progress.Lang.AppError( "3 - пока синхронизируем только Омских клиентов.").

      IF iTypeCl = 1 OR iTypeCl = 3
         THEN clActionStatus = IF AVAIL person THEN 2 ELSE 1.
      IF iTypeCl = 0	
         THEN clActionStatus = IF AVAIL cust-corp THEN 2 ELSE 1.

	&IF DEFINED( DEBUG-LOG) &THEN 
      ELSE PUT UNFORMATTED "    + проверяем клиента" SKIP. &ENDIF
      /*===== проверяем клиента =====*/
        
      FIND FIRST doc-mfr
         WHERE doc-mfr.clientid = bank.clients-mfr.id
         NO-LOCK NO-ERROR.
      IF NOT AVAIL doc-mfr AND (iTypeCl = 1 OR iTypeCl = 3) AND clActionStatus = 1 THEN 
      DO ON ERROR UNDO, THROW:
         UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_DOC_NOT_FOUND}).
      END.

      /* выбираем основной адрес для клиента */
      strStatusAdr = "notFound".
      FOR EACH adr-mfr WHERE adr-mfr.clientid = bank.clients-mfr.id 
      /* AND (adr-mfr.adresstype = "АдрПроп" OR adr-mfr.adresstype = "АдрПочт") */ 
      /* AND adr-mfr.adressvolume = {&VOLUME_UPPER} */ NO-LOCK ON ERROR UNDO, THROW:
         IF (iTypeCl = 0 AND adr-mfr.adresstype = "АдрЮр")
            OR ((iTypeCl = 1 OR iTypeCl = 3) AND adr-mfr.adresstype = "АдрПроп") THEN 
         DO:
            strAdress = ConvertAdress2BIS(TRIM(adr-mfr.adress)).        
            strStatusAdr = ENTRY(1,strAdress,"|").
            IF strStatusAdr = "bad" THEN NEXT.
            strKodReg = ENTRY(2,strAdress,"|").
            strAdress = ENTRY(3,strAdress,"|").
            LEAVE.
         END.
      END.
      IF strStatusAdr = "notFound" THEN
         UNDO, THROW NEW Progress.Lang.AppError( "не найден основной адрес клиента").
      PUT UNFORMATTED "основной адрес клиента " strAdress SKIP.
      IF bank.clients-mfr.birthdate = ?
         AND clActionStatus = 1
         AND (iTypeCl = 1 OR iTypeCl = 3) THEN 
      DO ON ERROR UNDO, THROW:
         UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_BIRTHDAY}).
      END. 
      ELSE 
      DO ON ERROR UNDO, THROW:
         dateBirthDay = bank.clients-mfr.birthdate.
      END. 
      IF  iTypeCl = 0 THEN 
      DO ON ERROR UNDO, THROW:
         IF bank.clients-mfr.regdate = ? AND clActionStatus = 1 THEN 
         DO ON ERROR UNDO, THROW:
            dateBirthDay = DATE (1, 1, 1900).
         END. 
         ELSE dateBirthDay = bank.clients-mfr.regdate.
      END.      

      IF bank.clients-mfr.opentime = ? AND clActionStatus = 1 THEN 
      DO ON ERROR UNDO, THROW:
         dateOpenTime = TODAY.
      END. 
      ELSE dateOpenTime = bank.clients-mfr.opentime.

      IF bank.clients-mfr.countryid = ? THEN 
      DO ON ERROR UNDO, THROW:
         IF clActionStatus = 1 THEN 
         DO ON ERROR UNDO, THROW:
            txtErr = ADDERROR(txtErr,{&ERROR_COUNTRY_NOT_FOUND}). 
            strCountryId = "rus".
         END.
         ELSE strCountryId = ?.
      END.
      ELSE 
      DO ON ERROR UNDO, THROW:
         strCountryId = TRIM(bank.clients-mfr.countryid).
         FIND FIRST country WHERE country.country-id = strCountryId NO-LOCK NO-ERROR.
         IF NOT AVAIL country THEN 
         DO ON ERROR UNDO, THROW:
            txtErr = ADDERROR(txtErr,{&ERROR_COUNTRY_NOT_FOUND}).
            IF clActionStatus = 1 THEN strCountryId = "RUS".
            ELSE strCountryId = ?.
         END.   
      END.
      IF (bank.clients-mfr.fname = ?
         OR TRIM(bank.clients-mfr.fname) = "")
         AND clActionStatus = 1 THEN 
      DO ON ERROR UNDO, THROW:
         UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_CLIENT_NAME}).
      END.
      IF bank.clients-mfr.fname <> ? THEN
         strFirstNames = TRIM(bank.clients-mfr.fname).
      ELSE strFirstNames = ?.
      /*
          0 Юридическое лицо
          1 Физическое лицо
          2 Банк
          3 Индивидуальный предприниматель
      */
      IF bank.clients-mfr.subjectype = ? OR bank.clients-mfr.subjectype > 3 THEN 
      DO ON ERROR UNDO, THROW:
         UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_CLIENT_TYPE}).
      END.   
      PUT UNFORMATTED "begin strFirstNames = " + strFirstNames SKIP.  
      IF (iTypeCl = 1 OR iTypeCl = 3) THEN 
      DO ON ERROR UNDO, THROW:
         IF strFirstNames <> ? THEN 
         DO ON ERROR UNDO, THROW:
            IF strFirstNames BEGINS "Нотариус" THEN
            DO:
               strFirstNames = REPLACE(bank.clients-mfr.fname,"Нотариус ","").
               tmpInt = INDEX(strFirstNames," "). /* разбираем строку ФИО - все через пробелы в идеале */
               PUT UNFORMATTED "1 strFirstNames = " + strFirstNames "; tmpInt = " tmpInt SKIP.
               IF tmpInt > 0 THEN 
               DO ON ERROR UNDO, THROW:
                  strNameLast = ENTRY(1,strFirstNames," ").
                  IF LENGTH(strFirstNames) > tmpInt THEN
                     strFirstNames = SUBSTRING(strFirstNames,tmpInt + 1).
                  ELSE
                     strFirstNames = "".
                  PUT UNFORMATTED "strNameLast = "  strNameLast "; strFirstNames = " + strFirstNames SKIP.
               END.
               ELSE 
               DO ON ERROR UNDO, THROW:
                  strNameLast = strFirstNames.
                  strFirstNames = "".
               END.                 
            END.
            ELSE IF strFirstNames BEGINS "Адвокат" THEN
               DO:
                  strFirstNames = REPLACE(bank.clients-mfr.fname,"Адвокат ","").
                  tmpInt = INDEX(strFirstNames," "). /* разбираем строку ФИО - все через пробелы в идеале */
                  PUT UNFORMATTED "1 strFirstNames = " + strFirstNames "; tmpInt = " tmpInt SKIP.
                  IF tmpInt > 0 THEN 
                  DO ON ERROR UNDO, THROW:
                     strNameLast = ENTRY(1,strFirstNames," ").
                     IF LENGTH(strFirstNames) > tmpInt THEN
                        strFirstNames = SUBSTRING(strFirstNames,tmpInt + 1).
                     ELSE
                        strFirstNames = "".
                     PUT UNFORMATTED "strNameLast = "  strNameLast "; strFirstNames = " + strFirstNames SKIP.
                  END.
                  ELSE 
                  DO ON ERROR UNDO, THROW:
                     strNameLast = strFirstNames.
                     strFirstNames = "".
                  END.                 
               END.
               ELSE IF strFirstNames BEGINS "Предприниматель" THEN
                  DO:
                     strFirstNames = REPLACE(bank.clients-mfr.fname,"Предприниматель ","").
                     tmpInt = INDEX(strFirstNames," "). /* разбираем строку ФИО - все через пробелы в идеале */
                     PUT UNFORMATTED "1 strFirstNames = " + strFirstNames "; tmpInt = " tmpInt SKIP.
                     IF tmpInt > 0 THEN 
                     DO ON ERROR UNDO, THROW:
                        strNameLast = ENTRY(1,strFirstNames," ").
                        IF LENGTH(strFirstNames) > tmpInt THEN
                           strFirstNames = SUBSTRING(strFirstNames,tmpInt + 1).
                        ELSE
                           strFirstNames = "".
                        PUT UNFORMATTED "strNameLast = "  strNameLast "; strFirstNames = " + strFirstNames SKIP.
                     END.
                     ELSE 
                     DO ON ERROR UNDO, THROW:
                        strNameLast = strFirstNames.
                        strFirstNames = "".
                     END.                 
                  END.
                  ELSE IF strFirstNames BEGINS "Частный предприниматель" THEN
                     DO:
                        strFirstNames = REPLACE(bank.clients-mfr.fname,"Частный предприниматель ","").
                        tmpInt = INDEX(strFirstNames," "). /* разбираем строку ФИО - все через пробелы в идеале */
                        PUT UNFORMATTED "1 strFirstNames = " + strFirstNames "; tmpInt = " tmpInt SKIP.
                        IF tmpInt > 0 THEN 
                        DO ON ERROR UNDO, THROW:
                           strNameLast = ENTRY(1,strFirstNames," ").
                           IF LENGTH(strFirstNames) > tmpInt THEN
                              strFirstNames = SUBSTRING(strFirstNames,tmpInt + 1).
                           ELSE
                              strFirstNames = "".
                           PUT UNFORMATTED "strNameLast = "  strNameLast "; strFirstNames = " + strFirstNames SKIP.
                        END.
                        ELSE 
                        DO ON ERROR UNDO, THROW:
                           strNameLast = strFirstNames.
                           strFirstNames = "".
                        END.                 
                     END.
                     ELSE IF strFirstNames BEGINS "(Глава КФХ)" THEN
                        DO:
                           strFirstNames = REPLACE(bank.clients-mfr.fname,"(Глава КФХ) ","").
                           tmpInt = INDEX(strFirstNames," "). /* разбираем строку ФИО - все через пробелы в идеале */
                           PUT UNFORMATTED "1 strFirstNames = " + strFirstNames "; tmpInt = " tmpInt SKIP.
                           IF tmpInt > 0 THEN 
                           DO ON ERROR UNDO, THROW:
                              strNameLast = ENTRY(1,strFirstNames," ").
                              IF LENGTH(strFirstNames) > tmpInt THEN
                                 strFirstNames = SUBSTRING(strFirstNames,tmpInt + 1).
                              ELSE
                                 strFirstNames = "".
                              PUT UNFORMATTED "strNameLast = "  strNameLast "; strFirstNames = " + strFirstNames SKIP.
                           END.
                           ELSE 
                           DO ON ERROR UNDO, THROW:
                              strNameLast = strFirstNames.
                              strFirstNames = "".
                           END.                 
                        END.
                        ELSE IF strFirstNames BEGINS "Глава КФХ" THEN
                        DO:
                           strFirstNames = REPLACE(bank.clients-mfr.fname,"Глава КФХ ","").
                           tmpInt = INDEX(strFirstNames," "). /* разбираем строку ФИО - все через пробелы в идеале */
                           PUT UNFORMATTED "1 strFirstNames = " + strFirstNames "; tmpInt = " tmpInt SKIP.
                           IF tmpInt > 0 THEN 
                           DO ON ERROR UNDO, THROW:
                              strNameLast = ENTRY(1,strFirstNames," ").
                              IF LENGTH(strFirstNames) > tmpInt THEN
                                 strFirstNames = SUBSTRING(strFirstNames,tmpInt + 1).
                              ELSE
                                 strFirstNames = "".
                              PUT UNFORMATTED "strNameLast = "  strNameLast "; strFirstNames = " + strFirstNames SKIP.
                           END.
                           ELSE 
                           DO ON ERROR UNDO, THROW:
                              strNameLast = strFirstNames.
                              strFirstNames = "".
                           END.                 
                        END.
                        ELSE IF strFirstNames BEGINS "глава крестьянского (фермерского) хозяйства" THEN
                        DO:
                           strFirstNames = REPLACE(bank.clients-mfr.fname,"глава крестьянского (фермерского) хозяйства ","").
                           tmpInt = INDEX(strFirstNames," "). /* разбираем строку ФИО - все через пробелы в идеале */
                           PUT UNFORMATTED "1 strFirstNames = " + strFirstNames "; tmpInt = " tmpInt SKIP.
                           IF tmpInt > 0 THEN 
                           DO ON ERROR UNDO, THROW:
                              strNameLast = ENTRY(1,strFirstNames," ").
                              IF LENGTH(strFirstNames) > tmpInt THEN
                                 strFirstNames = SUBSTRING(strFirstNames,tmpInt + 1).
                              ELSE
                                 strFirstNames = "".
                              PUT UNFORMATTED "strNameLast = "  strNameLast "; strFirstNames = " + strFirstNames SKIP.
                           END.
                           ELSE 
                           DO ON ERROR UNDO, THROW:
                              strNameLast = strFirstNames.
                              strFirstNames = "".
                           END.                 
                        END.
                        ELSE IF strFirstNames BEGINS 'Глава КХ "Щелкановское"' THEN
                        DO:
                           strFirstNames = REPLACE(bank.clients-mfr.fname,'Глава КХ "Щелкановское" ',"").
                           tmpInt = INDEX(strFirstNames," "). /* разбираем строку ФИО - все через пробелы в идеале */
                           PUT UNFORMATTED "1 strFirstNames = " + strFirstNames "; tmpInt = " tmpInt SKIP.
                           IF tmpInt > 0 THEN 
                           DO ON ERROR UNDO, THROW:
                              strNameLast = ENTRY(1,strFirstNames," ").
                              IF LENGTH(strFirstNames) > tmpInt THEN
                                 strFirstNames = SUBSTRING(strFirstNames,tmpInt + 1).
                              ELSE
                                 strFirstNames = "".
                              PUT UNFORMATTED "strNameLast = "  strNameLast "; strFirstNames = " + strFirstNames SKIP.
                           END.
                           ELSE 
                           DO ON ERROR UNDO, THROW:
                              strNameLast = strFirstNames.
                              strFirstNames = "".
                           END.                 
                        END. 
                        ELSE
                        DO:
                           tmpInt = INDEX(strFirstNames," "). /* разбираем строку ФИО - все через пробелы в идеале */
                           IF tmpInt > 0 THEN 
                           DO ON ERROR UNDO, THROW:
                              strNameLast = ENTRY(1,strFirstNames," ").
                              IF LENGTH(strFirstNames) > tmpInt THEN
                                 strFirstNames = SUBSTRING(strFirstNames,tmpInt + 1).
                              ELSE
                                 strFirstNames = "".
                           END.
                           ELSE 
                           DO ON ERROR UNDO, THROW:
                              strNameLast = strFirstNames.
                              strFirstNames = "".
                           END.
                        END.
         END.
         ELSE strNameLast = ?.
         IF Convert2Gender( bank.clients-mfr.fname, bank.clients-mfr.sex) EQ ?
            THEN UNDO, THROW NEW Progress.Lang.AppError( "не указан пол клиента CID=" + STRING( bank.clients-mfr.cid)).
      END. /* IF iTypeCl = 1 OR iTypeCl = 3 THEN DO: */
      ELSE IF iTypeCl = 0 THEN 
         DO ON ERROR UNDO, THROW:
            IF bank.clients-mfr.sname = ? THEN 
            DO ON ERROR UNDO, THROW:
               IF clActionStatus = 1 THEN 
                  strNameLast = "".
               ELSE 
                  strNameLast = ?.
            END.
            ELSE 
               strNameLast = TRIM(bank.clients-mfr.sname).          
         END.
        
      PUT UNFORMATTED "strNameLast = " + strNameLast "; " "strFirstNames = " + strFirstNames ";" SKIP.        

      bGender = (Convert2Gender( bank.clients-mfr.fname, bank.clients-mfr.sex) EQ "М").

      

      IF bank.clients-mfr.inn = ? OR TRIM(bank.clients-mfr.inn) = '' THEN 
      DO ON ERROR UNDO, THROW:
         IF iTypeCl = 0 THEN 
         DO ON ERROR UNDO, THROW: /* если юрик - ИНН обязателен */
            UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_INN} + " INN=? обязателен").
         END.
         strInn = "".
      END.
      ELSE 
      DO ON ERROR UNDO, THROW:
         strInn = TRIM(bank.clients-mfr.inn).
         IF IsMyNumber(strInn) <> FALSE OR (LENGTH(strInn) <> 5 AND LENGTH(strInn) <> 10 AND LENGTH(strInn) <> 12) THEN 
         DO ON ERROR UNDO, THROW: /* формат ИНН */
            IF iTypeCl = 0 THEN 
            DO ON ERROR UNDO, THROW:
               UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_INN} + "не 10 и 12 знаков и обязателен").
            END.
            strInn = "".
         END.
      END.
      IF bank.clients-mfr.ogrn = ? OR TRIM(bank.clients-mfr.ogrn) = "" THEN 
      DO ON ERROR UNDO, THROW:
         IF iTypeCl = 0 THEN 
         DO ON ERROR UNDO, THROW: /* если юрик - ОГРН обязателен */
            IF bank.clients-mfr.cid <> 763 AND bank.clients-mfr.cid <> 419 AND bank.clients-mfr.cid <> 2399 AND bank.clients-mfr.cid <> 9333
               AND bank.clients-mfr.countryid EQ 'RUS'
               THEN
               UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_OGRN}).
         END.
      END.
      strOgrn = (IF bank.clients-mfr.ogrn NE ? THEN TRIM(bank.clients-mfr.ogrn) ELSE ?).

      IF bank.clients-mfr.formtype <> ? THEN 
         strFormType = TRIM(bank.clients-mfr.formtype).
      ELSE strFormType = "".
      IF iTypeCl = 0 THEN 
      DO ON ERROR UNDO, THROW: /* если юрик - вид предприятия обязателен и по справочнику */ 
         FIND FIRST code WHERE code.class EQ 'КодПредп' AND code.parent EQ 'КодПредп' AND code.code = strFormType NO-LOCK NO-ERROR.
         IF NOT AVAIL code THEN 
         DO ON ERROR UNDO, THROW:
            strFormType = "".
         END. 
         ELSE
            strFormType = TRIM(code.val).
      END.
        
      IF bank.clients-mfr.client_type <> ? THEN 
         strClientType = TRIM(bank.clients-mfr.client_type).
      ELSE strClientType = "".
      IF bank.clients-mfr.cid EQ 88282 THEN strClientType = "НФОФС".
      IF strClientType EQ ""           THEN strClientType = "НОАБС".
      PUT UNFORMATTED iTypeCl ";" strClientType SKIP.
      IF iTypeCl = 0 THEN 
      DO ON ERROR UNDO, THROW: /* если юрик - (субъект) обязателен и по справочнику */ 
         FIND FIRST code
            WHERE code.class EQ 'Субъект'
            AND code.parent EQ 'Субъект'
            AND code.code = strClientType NO-LOCK NO-ERROR.
         IF NOT AVAIL code THEN 
         DO ON ERROR UNDO, THROW:
            UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_TYPEFORM}).
         END.
      END.
      IF bank.clients-mfr.dolruk <> ? AND TRIM(bank.clients-mfr.dolruk) <> "" THEN 
         strDolRuk = TRIM(bank.clients-mfr.dolruk).
      ELSE strDolRuk = {&DOLRUK_IF_EMPTY}. 
      
      /*Телефоны*/       
      DEF VAR iCellPhone AS CHAR NO-UNDO.
      DEF VAR iSmsPhone  AS CHAR NO-UNDO.
      DEF VAR iHomePhone AS CHAR NO-UNDO.

      iCellPhone = IF bank.clients-mfr.cellphone NE ? THEN bank.clients-mfr.cellphone ELSE "".
      iSmsPhone  = IF bank.clients-mfr.smsphone  NE ? THEN bank.clients-mfr.smsphone  ELSE "".

      iCellPhone = TRIM(iCellPhone + "," + iSmsPhone,",").
      
      iHomePhone = IF bank.clients-mfr.phone    NE ? THEN bank.clients-mfr.phone     ELSE "".
      strPhone1 = IF bank.clients-mfr.homephone NE ? THEN ENTRY(1,bank.clients-mfr.homephone) ELSE "".
      strPhone2 = IF bank.clients-mfr.workphone NE ? THEN ENTRY(1,bank.clients-mfr.workphone) ELSE "".
      
      strPhoneOther = "".
      
      DEF VAR ik AS INT NO-UNDO.

      IF NUM-ENTRIES(bank.clients-mfr.homephone,",") GT 1 THEN
      DO ik = 2 TO NUM-ENTRIES(bank.clients-mfr.homephone,","):
         strPhoneOther = DeDublPhone(ENTRY(ik,bank.clients-mfr.homephone,","),strPhoneOther).
      END. 
      IF NUM-ENTRIES(bank.clients-mfr.workphone,",") GT 1 THEN
      DO ik = 2 TO NUM-ENTRIES(bank.clients-mfr.workphone,","):
         strPhoneOther = DeDublPhone(ENTRY(ik,bank.clients-mfr.workphone,","),strPhoneOther).
      END.
      
      strPhoneOther = DeDublPhone(bank.clients-mfr.phonestr,strPhoneOther).
      
      put unformatted
         "phone = "     bank.clients-mfr.phone ";"
         "homephone = " bank.clients-mfr.homephone ";"
         "workphone = " bank.clients-mfr.workphone ";"
         "cellphone = " bank.clients-mfr.cellphone ";"
         "smsphone = "  bank.clients-mfr.smsphone ";"
         "phonestr = "  bank.clients-mfr.phonestr ";"
      SKIP.
      put unformatted
         "iCellPhone = "    iCellPhone    ";"
         "iSmsPhone = "     iSmsPhone     ";" 
         "iHomePhone = "    iHomePhone    ";"
         "strPhone1 = "     strPhone1     ";" 
         "strPhone2 = "     strPhone2     ";"
         "strPhoneOther = " strPhoneOther ";"
      SKIP.
        
      IF bank.clients-mfr.taxid = ? THEN 
      DO ON ERROR UNDO, THROW:
         IF clActionStatus = 1 THEN
            strTaxInsp = "".
         ELSE strTaxInsp = ?.
      END.
      ELSE strTaxInsp = STRING(bank.clients-mfr.taxid).
      /* end клиент */
          
      /*===== проверяем документы ФЛ на корректность =====*/
      IF iTypeCl = 1 OR iTypeCl = 3 THEN 
      DO ON ERROR UNDO, THROW:
         FOR EACH doc-mfr
            WHERE doc-mfr.clientid = bank.clients-mfr.id NO-LOCK ON ERROR UNDO, THROW:
            /* tmpStr = convertDoc2BIS( doc-mfr.doctype, doc-mfr.docseria, doc-mfr.docnumber). */
            IF (doc-mfr.doctype = ? OR TRIM(doc-mfr.doctype) = "") AND clActionStatus = 1 THEN 
            DO:
               IF doc-mfr.volume EQ 1
                  THEN UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_DOC_TYPE}).
               ELSE NEXT.
            END.
            strDocumentId = TRIM(doc-mfr.doctype).
            FIND FIRST code
               WHERE code.class EQ "КодДокум"
               AND code.parent EQ "КодДокум"
               AND code.code = strDocumentId
               NO-LOCK NO-ERROR.
            IF NOT AVAIL code THEN 
            DO:
               IF doc-mfr.volume EQ 1
                  THEN UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_DOC_TYPE} + "(" + strDocumentId + ")").
               ELSE NEXT.
            END.
            strDocument = convertDoc2BIS(strDocumentId, doc-mfr.docseria, doc-mfr.docnumber).

            IF strDocument = "" OR IsCorrectNumberDoc (INPUT strDocumentId, INPUT strDocument) THEN
            DO:
               IF doc-mfr.volume EQ 1
                  THEN UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_DOC_NUMBER} + " strDocumentId = " + strDocumentId + " strDocument = " + strDocument + ".").
               ELSE NEXT.
            END.

            IF doc-mfr.placedoc = ? OR TRIM(doc-mfr.placedoc) = "" THEN 
            DO: 
               strIssueCl = "".
               strIssueDoc = "".
            END.
            ELSE 
            DO:
               strIssueCl = TRIM(doc-mfr.placedoc).
               strIssueDoc = strIssueCl.
            END.
            IF doc-mfr.dockodpodr <> ? AND TRIM(doc-mfr.dockodpodr) <> "" THEN 
            DO:
               strKodPodr = TRIM(doc-mfr.dockodpodr).
               strIssueCl = strIssueCl + ',' + strKodPodr.
            END.
            ELSE strKodPodr = "".

            /* IF strIssueCl = "" THEN txtErr = ADDERROR(txtErr,{&ERROR_ISSUE_EMPTY}). */
    	    
            IF doc-mfr.docopendate = ? THEN 
            DO:
               IF doc-mfr.volume EQ 1 AND doc-mfr.docnumber <> 'нет' AND doc-mfr.doctype <> "МиграцКарта"
                  THEN UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_DATEDOC}).
               ELSE NEXT.
            END.
            ELSE 
            DO:
               dateOpenDoc = doc-mfr.docopendate.
            END. 
         END. /* FOR EACH */
      END. /* IF iTypeCl = 1 OR iTypeCl = 3 THEN DO: */
      /* end документ */
           
                 
      IF clActionStatus = 1
         AND (iBisId <= 0 OR iBisId = ?) 
         AND (iTypeCl = 1 OR iTypeCl = 3) THEN 
      DO ON ERROR UNDO, THROW:
         /* создаем PERSON */
         FIND FIRST doc-mfr
            WHERE doc-mfr.clientid = bank.clients-mfr.id
            AND TRIM(doc-mfr.doctype) EQ "Паспорт"
            AND doc-mfr.volume EQ 1
            NO-LOCK NO-ERROR.
         IF NOT AVAIL doc-mfr THEN 
         DO:
            FIND FIRST doc-mfr
               WHERE doc-mfr.clientid = bank.clients-mfr.id
               AND doc-mfr.volume EQ 1 AND doc-mfr.docnumber <> 'нет'
               NO-LOCK NO-ERROR.
         END.
    	
         IF AVAIL doc-mfr THEN 
         DO ON ERROR UNDO, THROW:
            RUN MakeIssue IN h_cust (doc-mfr.placedoc, doc-mfr.dockodpodr, OUTPUT strIssueCl).
            strDocumentId = TRIM(doc-mfr.doctype).
            strDocument = convertDoc2BIS( doc-mfr.doctype, doc-mfr.docseria, doc-mfr.docnumber).
            strKodPodr = doc-mfr.dockodpodr.
            dateOpenDoc = doc-mfr.docopendate.
         END. 
         ELSE 
         DO ON ERROR UNDO, THROW:
            UNDO, THROW NEW Progress.Lang.AppError( "у клиента нет документа по умолчанию").
         END.

         CREATE person.
         ASSIGN
            person.person-id = Get-New-Person-Id()
            person.name-last = strNameLast
            person.first-names = strFirstNames
            /*person.address[1] = strAdress*/
            /*person.phone[1] = strPhone1*/
            /*person.phone[2] = strPhone2*/
            person.phone[1] = iHomePhone + "," + strPhone1
            person.phone[2] = strPhone2 + "," + iCellPhone
            person.country-id = strCountryId
            person.document = strDocument
            person.document-id = strDocumentId
            person.tax-insp = strTaxInsp
            person.inn = strInn
            person.issue = strIssueCl
            person.birthday = dateBirthDay
            person.gender = bGender
            person.date-in = dateOpenTime
            .
         iBisId = person.person-id.
	      &IF DEFINED( DEBUG-LOG) &THEN 
            PUT UNFORMATTED "    + создаем ФЛ person-id=" + STRING( person.person-id) SKIP.
         &ENDIF
         
         VALIDATE person.
         bCreated = TRUE.
         UpdateSigns("person",STRING(iBisId),"fromOmskABS","Да",?).
         UpdateSigns("person",STRING(iBisId),"syncOmskABS","Да",?).
         UpdateSigns("person",STRING(iBisId),"ВидСотр","клиент",?).
         UpdateSigns("person",STRING(iBisId),"Document4Date_vid",STRING(dateOpenDoc,"99.99.9999"),?).
        
         UpdateSigns("person",STRING(iBisId),"ДатаПровТерр", STRING(Today,"99/99/9999"),?). 
         RUN GetClientUNKg IN h_cust ("person", STRING(iBisId), NO, OUTPUT vUNKg).

      /*
      0 Юридическое лицо
      1 Физическое лицо
      2 Банк
      3 Индивидуальный предприниматель
      */
      END.  /* создаем PERSON */
      
      ELSE IF clActionStatus = 1 
            AND (iBisId <= 0 OR iBisId = ?) 
            AND iTypeCl = 0 THEN 
         DO ON ERROR UNDO, THROW:
            put unformatted icid 1111 skip.
            /* создаем CUST-CORP */
            IF strOgrn NE ? THEN 
            DO:
               put unformatted icid 2222 skip.

               FIND FIRST signs WHERE
                  signs.file-name = "cust-corp"
                  AND signs.code = "ОГРН"
                  AND signs.xattr-value = strOgrn 
                  NO-LOCK NO-ERROR.
               IF AVAIL signs THEN 
               DO:
                  iBisId = INT64(signs.surrogate).
                  RUN SET_ERROR_CLIENT(INPUT {&STATUS_DUPLICATE_CLIENT}, INPUT {&ERROR_DUPLICATE_CLIENT}).
                  UNDO, LEAVE MYNEXT. 
               END.
            END. ELSE 
            DO:
         
            END.
            CREATE cust-corp.
            /*основные*/
            ASSIGN
               cust-corp.cust-id         = Get-New-CustCorp-Id()
               cust-corp.cust-stat       = strFormType
               cust-corp.name-corp       = strFirstNames
               cust-corp.name-short      = strNameLast
               cust-corp.addr-of-low[1]  = strAdress
               cust-corp.inn             = strInn
               cust-corp.date-in         = dateOpenTime
               cust-corp.country-id      = strCountryId
               cust-corp.tax-insp        = strTaxInsp
               cust-corp.class-code      = "cust-corp" 
               .
            iBisId = cust-corp.cust-id.              
            VALIDATE cust-corp.
            bCreated = TRUE.
            /*дополнительные*/
            /* обязательные */
            sUpdateSigns("cust-corp",STRING(iBisId),"fromOmskABS","Да",?).
            sUpdateSigns("cust-corp",STRING(iBisId),"syncOmskABS","Да",?).
            sUpdateSigns("cust-corp",STRING(iBisId),"RegDate",STRING(dateBirthDay,"99.99.9999"),?).
            sUpdateSigns("cust-corp",STRING(iBisId),"ДолРук",strDolRuk,?).     
            sUpdateSigns("cust-corp",STRING(iBisId),"Субъект",strClientType,?).
            sUpdateSigns("cust-corp",STRING(iBisId),"ОГРН",strOgrn,?).
            sUpdateSigns("cust-corp",STRING(iBisId),"ДатаПровТерр", STRING(Today,"99/99/9999"),?).
         
            IF strKodReg <> ? AND strKodReg <> "" THEN 
            DO:
               sUpdateSigns("cust-corp",STRING(iBisId),"КодРегГНИ",strKodReg,?). 
               sUpdateSigns("cust-corp",STRING(iBisId),"КодРег",ConvertRegion ( strKodReg),?).	 
            END.
            RUN GetClientUNKg IN h_cust ("cust-corp", STRING(iBisId), NO, OUTPUT vUNKg).
         END. /* создаем CUST-CORP */
      

      /*===== update клиента, его документов, адресов =====*/
      &IF DEFINED( DEBUG-LOG) &THEN 
         PUT UNFORMATTED "    + обновление клиента, его документов, адресов" SKIP.
      &ENDIF
      
      UpdateClient:
      DO ON ERROR UNDO, THROW:
         IF iTypeCl = 1 OR iTypeCl = 3 THEN 
         DO ON ERROR UNDO, THROW:  /* PERSON */
            IF NOT AVAIL person OR iBisId = ? OR iBisId <= 0 or person.person-id <> iBisId
               THEN UNDO, THROW NEW Progress.Lang.AppError( 'клиент не найден при попытке обновления').
    	     
            IF bCreated <> TRUE THEN 
            DO ON ERROR UNDO, THROW:
               IF strNameLast <> ? AND TRIM(strNameLast) <> "" AND person.name-last <> strNameLast THEN
                  person.name-last = strNameLast.
               IF strFirstNames <> ? AND TRIM(strFirstNames) <> "" AND person.first-names <> strFirstNames THEN
                  person.first-names = strFirstNames.
               /* IF strAdress <> ? AND TRIM(strAdress) <> "" THEN
                       person.address[1] = strAdress. */
               /*IF strPhone1 <> ? AND TRIM(strPhone1) <> "" AND person.phone[1] <> strPhone1 THEN*/
               person.phone[1] = iHomePhone + "," + strPhone1.
               /*IF strPhone2 <> ? AND TRIM(strPhone2) <> "" AND person.phone[2] <> strPhone2 THEN*/
               person.phone[2] = strPhone2 + "," + iCellPhone.
               /* put unformatted "##" + person.phone[2] SKIP. */
               IF strCountryId <> ? AND TRIM(strCountryId) <> "" AND person.country-id <> strCountryId THEN   
                  person.country-id = strCountryId.
               /* IF strDocument <> ? AND TRIM(strDocument) <> "" AND person.document <> strDocument THEN 
                       person.document = strDocument.
               IF strDocumentId <> ? AND TRIM(strDocumentId) <> "" AND person.document-id <> strDocumentId THEN
                       person.document-id = strDocumentId.
               */
               IF strTaxInsp <> ? AND TRIM(strTaxInsp) <> "" AND person.tax-insp <> TRIM(strTaxInsp)
                  THEN person.tax-insp = TRIM(strTaxInsp).

               IF strInn <> ? AND TRIM(strInn) <> "" AND person.inn <> strInn
                  THEN person.inn = strInn.

               IF strIssueCl <> ? AND TRIM(strIssueCl) <> "" AND person.issue <> strIssueCl
                  THEN person.issue = strIssueCl.

               IF dateBirthDay <> ? AND person.birthday <> dateBirthDay THEN
                  person.birthday = dateBirthDay.
               IF bGender <> ? AND person.gender <> bGender THEN
                  person.gender = bGender.
               IF dateOpenTime <> ? AND dateOpenTime <> TODAY THEN
                  person.date-in = dateOpenTime.                        
            END.
            IF iCid <> ? AND iCid <> 0 THEN 
            DO ON ERROR UNDO, THROW:
               IF iTypeCl = 1 THEN 
               DO:
                  sUpdateSigns("person",STRING(iBisId),"CID",STRING(iCid),?).
               END.
               IF iTypeCl = 3 THEN 
               DO:
                  IF GetXattrValueEx( "person", STRING( iBisId),"CIDIP", "-") NE STRING(iCid) THEN 
                  DO:
                     UpdateSigns("person",STRING(iBisId),"CIDIP",STRING(iCid),?).
                     bChangeCID = TRUE.
                  END.
                  IF bank.clients-mfr.cidpers NE ? THEN
                     sUpdateSigns("person",STRING(iBisId),"CID",STRING(bank.clients-mfr.cidpers),?).
               END.
            END.
            /* обновление заполненных допреквизитов */
            IF iTypeCl = 1 THEN 
            DO:
               IF person.country-id EQ "RUS" THEN tmpStr = "ФЛ". 
               ELSE tmpStr = "ФЛН".
            END. ELSE 
            DO:
               tmpStr = "ФЛП".
            END.
            sUpdateSigns("person",STRING(iBisId),"Субъект",tmpStr,?).
            sUpdateSigns("person",STRING(iBisId),"Предпр",IF iTypeCl = 3 THEN "Предпр" ELSE ?,?).
    	    
            DEFINE VARIABLE mVidITD AS CHARACTER NO-UNDO.
            mVidITD = TRIM(ENTRY(1,bank.clients-mfr.fname," ")). 
            IF    mVidITD EQ "Адвокат"
               OR mVidITD EQ "Нотариус" THEN
               sUpdateSigns("person",STRING(iBisId),"ВидИТД",mVidITD,?).    	    

            IF bank.clients-mfr.birthplace <> ?
               AND TRIM(bank.clients-mfr.birthplace) <> ""
               THEN sUpdateSigns("person",STRING(iBisId),"birthplace",TRIM(bank.clients-mfr.birthplace),?).
            sUpdateSigns("person",STRING(iBisId),"Телефон3",TRIM(strPhoneOther),?).

            IF bank.clients-mfr.pfr <> ? AND TRIM(bank.clients-mfr.pfr) <> ""
               THEN sUpdateSigns("person",STRING(iBisId),"NumberPfr",TRIM(bank.clients-mfr.pfr),?).

            IF bank.clients-mfr.kpp <> ? AND TRIM(bank.clients-mfr.kpp) <> ""
               THEN sUpdateSigns("person",STRING(iBisId),"КПП",TRIM(bank.clients-mfr.kpp),?).

            IF bank.clients-mfr.ogrn <> ? AND TRIM(bank.clients-mfr.ogrn) <> ""
               THEN sUpdateSigns("person",STRING(iBisId),"ОГРН",TRIM(bank.clients-mfr.ogrn),?).   

            IF bank.clients-mfr.okato <> ? AND TRIM(bank.clients-mfr.okato) <> ""
               THEN sUpdateSigns("person",STRING(iBisId),"ОКАТО-НАЛОГ",TRIM(bank.clients-mfr.okato),?). 

            IF bank.clients-mfr.okpo <> ? AND TRIM(bank.clients-mfr.okpo) <> ""
               THEN sUpdateSigns("person",STRING(iBisId),"okpo",TRIM(bank.clients-mfr.okpo),?).

            IF bank.clients-mfr.okved <> ? AND TRIM(bank.clients-mfr.okved) <> ""
               THEN sUpdateSigns("person",STRING(iBisId),"ОКВЭД",TRIM(bank.clients-mfr.okved),?).

            IF bank.clients-mfr.email <> ? AND TRIM(bank.clients-mfr.email) <> ""
               THEN sUpdateSigns("person",STRING(iBisId),"e-mail",TRIM(bank.clients-mfr.email),?).

            IF bank.clients-mfr.grp <> ?
               THEN sUpdateSigns("person",STRING(iBisId),"grp",STRING(bank.clients-mfr.grp),?).

            IF bank.clients-mfr.officeno <> ?
               THEN sUpdateSigns("person",STRING(iBisId),"officeno",STRING(bank.clients-mfr.officeno),?).

            IF bank.clients-mfr.dolruk <> ? AND TRIM(bank.clients-mfr.dolruk) <> ""
               THEN sUpdateSigns("person",STRING(iBisId),"Долрук",TRIM(bank.clients-mfr.dolruk),?).

            IF bank.clients-mfr.director <> ? AND TRIM(bank.clients-mfr.director) <> ""
               THEN sUpdateSigns("person",STRING(iBisId),"ФИОрук",TRIM(bank.clients-mfr.director),?).

            IF bank.clients-mfr.channel <> ? AND TRIM(bank.clients-mfr.channel) <> ""
               THEN sUpdateSigns("person",STRING(iBisId),"КаналПривл",TRIM(bank.clients-mfr.channel),?).

            /* дата регистрации ( присвоения ОГРН, выдачи свид. о регистрации) vABSClientRow.REGDATE */
            IF bank.clients-mfr.regdate <> ?
               THEN 
            DO ON ERROR UNDO, THROW:
               sUpdateSigns("person",STRING(iBisId),"ДатаВПред",STRING( bank.clients-mfr.regdate, "99/99/9999"),?).
               sUpdateSigns("person",STRING(iBisId),"ДатаОГРН", STRING( bank.clients-mfr.regdate, "99/99/9999"),?).
            END.

            /* орган выдавший свидетельство о регистрации */
            IF bank.clients-mfr.orgreg <> ? AND TRIM(bank.clients-mfr.orgreg) <> ""
               THEN sUpdateSigns("person",STRING(iBisId),"ОргСведПред",TRIM(bank.clients-mfr.orgreg),?).

            /* место выдачи свидетельства о регистрации */
            IF bank.clients-mfr.placereg <> ? AND TRIM(bank.clients-mfr.placereg) <> ""
               THEN sUpdateSigns("person",STRING(iBisId),"МестСведПред",TRIM(bank.clients-mfr.placereg),?).

            strSerNal = (IF bank.clients-mfr.sernal <> ? AND TRIM(bank.clients-mfr.sernal) <> ""
               THEN TRIM(bank.clients-mfr.sernal) ELSE '').
            strNumNal = (IF bank.clients-mfr.numnal <> ? AND TRIM(bank.clients-mfr.numnal) <> "" 
               THEN TRIM(bank.clients-mfr.numnal) ELSE '').
            /* номер свидетельства о регистрации */
            IF bank.clients-mfr.sersvidreg + "," + bank.clients-mfr.numsvidreg <> ','
               AND bank.clients-mfr.sersvidreg + "," + bank.clients-mfr.numsvidreg <> ?
               THEN sUpdateSigns("person",STRING(iBisId),"УчДокГр", bank.clients-mfr.sersvidreg + "," + bank.clients-mfr.numsvidreg, ?).

            /* свидетельство о постановке на учет */
            strSerNal = (IF bank.clients-mfr.sernal <> ? AND TRIM(bank.clients-mfr.sernal) <> ""
               THEN TRIM(bank.clients-mfr.sernal) ELSE '').
            strNumNal = (IF bank.clients-mfr.numnal <> ? AND TRIM(bank.clients-mfr.numnal) <> "" 
               THEN TRIM(bank.clients-mfr.numnal) ELSE '').
            IF strSerNal <> '' AND strNumNal <> ''
               THEN sUpdateSigns("person",STRING(iBisId),"УчДок", strSerNal + ',' + strNumNal,?).
            IF bank.clients-mfr.datenal <> ?
               THEN sUpdateSigns( "person", STRING(iBisId), "УчДокДата", STRING(bank.clients-mfr.datenal, "99/99/9999"),?).
            IF bank.clients-mfr.risklevel <> ? THEN
               sUpdateSigns("person",STRING(iBisId),"РискОтмыв",IF bank.clients-mfr.risklevel > 0 THEN "Высокий" ELSE "", ?).
            IF bank.clients-mfr.riskosnov <> ? AND TRIM(bank.clients-mfr.riskosnov) <> "" THEN
               sUpdateSigns("person",STRING(iBisId),"ОценкаРиска",TRIM(bank.clients-mfr.riskosnov),?).
            IF bank.clients-mfr.vidbsns <> ? AND TRIM(bank.clients-mfr.vidbsns) <> "" THEN
               sUpdateSigns("person",STRING(iBisId),"ОснВидыДеят",TRIM(bank.clients-mfr.vidbsns),?).


            /* при смене ФИО меняем в роли клиента short-name и cust-name */
            FOR EACH cust-role
               WHERE cust-role.cust-cat = "Ч"
               AND cust-role.cust-id  = STRING( person.person-id) ON ERROR UNDO, THROW:
               IF person.name-last + " " + person.first-names <> cust-role.short-name OR
                  person.name-last + " " + person.first-names <> cust-role.cust-name THEN 
               DO ON ERROR UNDO, THROW:
                  IF person.name-last + " " + person.first-names <> cust-role.short-name
                     THEN ASSIGN cust-role.short-name = person.name-last + " " + person.first-names.
                  IF person.name-last + " " + person.first-names <> cust-role.cust-name
                     THEN ASSIGN cust-role.cust-name = person.name-last + " " + person.first-names.
                  VALIDATE cust-role.
               END.
            END.
	    
            sUpdateSigns("person",STRING(iBisId),"syncOmskABS","Да",?).
         END. /*         IF iTypeCl = 1 OR iTypeCl = 3 THEN DO:   ищем PERSON  */ 

         ELSE IF iTypeCl = 0 THEN 
            DO:  /* CUST-CORP */
               IF iBisId = ? OR iBisId <= 0 THEN 
               DO:  /* пробуем отыскать по INN и имени */
                  IF strInn <> ? AND strFirstNames <> ? AND strInn <> "" AND strFirstNames <> "" THEN 
                  DO:
                     FIND FIRST cust-corp WHERE
                        cust-corp.name-corp = strFirstNames
                        AND cust-corp.inn = strInn 
                        NO-LOCK NO-ERROR.
                     IF AVAIL cust-corp THEN iBisId = cust-corp.cust-id.
                  END.
                  IF iBisId = ? OR iBisId <= 0 THEN 
                  DO:
                     RUN SET_ERROR_CLIENT(INPUT {&STATUS_CLIENT_NOT_FOUND}, INPUT {&ERROR_CLIENT_NOT_FOUND}).
                     UNDO, LEAVE MYNEXT. 
                  END.
               END.
               FIND FIRST cust-corp WHERE cust-corp.cust-id = iBisId SHARE-LOCK NO-ERROR.
               IF NOT AVAIL cust-corp THEN 
               DO:
                  RUN SET_ERROR_CLIENT(INPUT {&STATUS_CLIENT_NOT_FOUND}, INPUT {&ERROR_CLIENT_NOT_FOUND}).
                  UNDO, LEAVE MYNEXT. 
               END.
               IF bCreated <> TRUE THEN 
               DO:
                  IF strFirstNames <> ? AND TRIM(strFirstNames) <> ""
                     AND cust-corp.name-corp <> strFirstNames
                     THEN cust-corp.name-corp = strFirstNames.
                  IF strClientType <> ? AND TRIM(strFormType) <> ""
                     AND cust-corp.cust-stat <> strFormType
                     THEN cust-corp.cust-stat = strFormType.
                  IF strNameLast <> ? AND TRIM(strNameLast) <> ""
                     AND cust-corp.name-short <> strNameLast
                     THEN cust-corp.name-short = strNameLast.
                  IF strInn <> ? AND TRIM(strInn) <> ""
                     AND cust-corp.inn <> strInn
                     THEN cust-corp.inn = strInn. 
                  IF dateBirthDay <> ? THEN 
                  DO:
                     sUpdateSigns("cust-corp",STRING(iBisId),"RegDate",STRING(dateBirthDay,"99.99.9999"),?).
                     sUpdateSigns("cust-corp",STRING(iBisId),"ДатаОГРН",STRING(dateBirthDay,"99.99.9999"),?).
                  END.
                  IF dateOpenTime <> ?
                     AND cust-corp.date-in <> dateOpenTime
                     THEN cust-corp.date-in = dateOpenTime.
                  IF strCountryId <> ? AND TRIM(strCountryId) <> ""
                     AND cust-corp.country-id <> strCountryId
                     THEN cust-corp.country-id = strCountryId.
                  IF strTaxInsp <> ? AND TRIM(strTaxInsp) <> ""
                     AND cust-corp.tax-insp <> strTaxInsp
                     THEN cust-corp.tax-insp = strTaxInsp.
                  IF strDolRuk <> ? AND TRIM(strDolRuk) <> "" THEN
                     sUpdateSigns("cust-corp",STRING(iBisId),"ДолРук",strDolRuk,?).
                  IF strClientType <> ? AND TRIM(strClientType) <> "" THEN
                     sUpdateSigns("cust-corp",STRING(iBisId),"Субъект",strClientType,?).
                  IF strOgrn <> ? AND TRIM(strOgrn) <> "" THEN
                     sUpdateSigns("cust-corp",STRING(iBisId),"ОГРН",TRIM(strOgrn),?).   
               END.
               IF iCid <> ? AND iCid <> 0
                  THEN sUpdateSigns("cust-corp",STRING(iBisId),"CID",STRING(iCid),?).

               /* обновление заполненных допреквизитов */
               IF bCreated THEN
                  IF strBranchId <> ? AND TRIM(strBranchId) <> "" THEN 
                  DO:
                     IF LENGTH(strBranchId) = 3 THEN strBranchId = '0' + strBranchId.
                     sUpdateSigns("cust-corp",STRING(iBisId),"branch-id",strBranchId,?).
                  END.
               IF bank.clients-mfr.birthplace <> ? AND TRIM(bank.clients-mfr.birthplace) <> "" THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"RegPlace",TRIM(bank.clients-mfr.birthplace),?).
               IF bank.clients-mfr.Phone <> ? AND TRIM(bank.clients-mfr.Phone) <> "" THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"tel",TRIM(bank.clients-mfr.Phone),?).
               IF bank.clients-mfr.workphone <> ? AND TRIM(bank.clients-mfr.workphone) <> ""
                  AND cust-corp.fax <> TRIM(bank.clients-mfr.workphone)
                  THEN cust-corp.fax = TRIM(bank.clients-mfr.workphone).
               IF bank.clients-mfr.clostime <> ?
                  AND cust-corp.date-out <> DATE(bank.clients-mfr.clostime)
                  THEN cust-corp.date-out = DATE(bank.clients-mfr.clostime).  
               IF bank.clients-mfr.kpp <> ? AND TRIM(bank.clients-mfr.kpp) <> ""
                  THEN sUpdateSigns("cust-corp",STRING(iBisId),"КПП",TRIM(bank.clients-mfr.kpp),?).
               IF bank.clients-mfr.okato <> ? AND TRIM(bank.clients-mfr.okato) <> ""
                  THEN sUpdateSigns("cust-corp",STRING(iBisId),"ОКАТО-НАЛОГ",TRIM(bank.clients-mfr.okato),?).
               IF bank.clients-mfr.okpo <> ? AND TRIM(bank.clients-mfr.okpo) <> ""
                  AND cust-corp.okpo <> TRIM(bank.clients-mfr.okpo)
                  THEN cust-corp.okpo = TRIM(bank.clients-mfr.okpo).  
               IF bank.clients-mfr.okved <> ? AND TRIM(bank.clients-mfr.okved) <> "" THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"ОКВЭД",TRIM(bank.clients-mfr.okved),?).
               IF bank.clients-mfr.email <> ? AND TRIM(bank.clients-mfr.email) <> "" THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"e-mail",TRIM(bank.clients-mfr.email),?).                     
               IF bank.clients-mfr.grp <> ? THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"grp",STRING(bank.clients-mfr.grp),?).                    
               IF bank.clients-mfr.officeno <> ? THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"officeno",STRING(bank.clients-mfr.officeno),?).
               IF bank.clients-mfr.director <> ? AND TRIM(bank.clients-mfr.director) <> "" THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"ФИОрук",TRIM(bank.clients-mfr.director),?).                    
               IF bank.clients-mfr.bkeeper <> ? AND TRIM(bank.clients-mfr.bkeeper) <> "" THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"ФИОбухг",TRIM(bank.clients-mfr.bkeeper),?).   
               IF bank.clients-mfr.orgreg <> ? AND TRIM(bank.clients-mfr.orgreg) <> "" THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"ОргСведПред",TRIM(bank.clients-mfr.orgreg),?). 
               IF bank.clients-mfr.placereg <> ? AND TRIM(bank.clients-mfr.placereg) <> "" THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"МестСведПред",TRIM(bank.clients-mfr.placereg),?). 
               IF bank.clients-mfr.highorg <> ? AND TRIM(bank.clients-mfr.highorg) <> "" THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"ОргУправ",TRIM(bank.clients-mfr.highorg),?).
               IF bank.clients-mfr.sumreg <> ? THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"УставКап",STRING(bank.clients-mfr.sumreg, "->,>>>,>>>,>>>,>>>,>>9.99"),?).                    
               IF bank.clients-mfr.risklevel <> ? THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"РискОтмыв",IF bank.clients-mfr.risklevel > 0 THEN "Высокий" ELSE "", ?).
               IF bank.clients-mfr.riskosnov <> ? AND TRIM(bank.clients-mfr.riskosnov) <> "" THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"ОценкаРиска",TRIM(bank.clients-mfr.riskosnov),?).
               /* IF bank.clients-mfr.vidbsns <> ? AND TRIM(bank.clients-mfr.vidbsns) <> "" THEN
                       sUpdateSigns("cust-corp",STRING(iBisId),"ЛицТип",TRIM(bank.clients-mfr.vidbsns),?). */
               IF bank.clients-mfr.vidbsns <> ? AND TRIM(bank.clients-mfr.vidbsns) <> "" THEN
                  sUpdateSigns("cust-corp",STRING(iBisId),"ОснВидыДеят",TRIM(bank.clients-mfr.vidbsns),?).
               /* свидетельство о постановке на учет */
               IF bank.clients-mfr.sernal <> ? AND TRIM(bank.clients-mfr.sernal) <> ""
                  THEN strSerNal = TRIM(bank.clients-mfr.sernal).
               ELSE strSerNal = ''.
               IF bank.clients-mfr.numnal <> ? AND TRIM(bank.clients-mfr.numnal) <> "" THEN
                  strNumNal = TRIM(bank.clients-mfr.numnal).
               ELSE strNumNal = ''.                 
               IF strSerNal <> '' AND strNumNal <> '' THEN 
                  sUpdateSigns("cust-corp",STRING(iBisId), "УчДок", strSerNal + ',' + strNumNal,?).
               IF bank.clients-mfr.datenal <> ?
                  THEN sUpdateSigns("cust-corp",STRING(iBisId), "УчДокДата", STRING(bank.clients-mfr.datenal, "99/99/9999"),?).
               /* ELSE sUpdateSigns("cust-corp",STRING(iBisId), "УчДокДата", ?, ?). */

               /* номер свидетельства о регистрации */
               IF bank.clients-mfr.sersvidreg + "," + bank.clients-mfr.numsvidreg <> ','
                  AND bank.clients-mfr.sersvidreg + "," + bank.clients-mfr.numsvidreg <> ?
               THEN sUpdateSigns("cust-corp",STRING(iBisId),"УчДокГр", bank.clients-mfr.sersvidreg + "," + bank.clients-mfr.numsvidreg, ?).

               sUpdateSigns("cust-corp",STRING(iBisId),"syncOmskABS","Да",?).       
            END. /* ELSE IF iTypeCl = 0 THEN DO:  CUST-CORP */
        


         /* роль клиента в филиале */
         IF bCreated THEN 
         DO ON ERROR UNDO, THROW:
            FIND FIRST cust-role
               WHERE cust-role.class-code = "ImaginClient"
               AND cust-role.cust-cat = strCustCat
               AND cust-role.cust-id  = (IF strCustCat EQ "Ч" THEN STRING( person.person-id) ELSE STRING( cust-corp.cust-id))
               AND cust-role.file-name = "branch"
               NO-ERROR.
            IF AVAIL cust-role AND cust-role.surrogate NE strBranchId THEN 
            DO ON ERROR UNDO, THROW:
               ASSIGN
                  cust-role.surrogate  = strBranchId
                  cust-role.open-date  = (IF strCustCat EQ "Ч" THEN person.date-in ELSE cust-corp.date-in)
                  cust-role.short-name = (IF strCustCat EQ "Ч" THEN person.name-last + " " + person.first-names ELSE cust-corp.name-short)
                  .
               VALIDATE cust-role.
            		    &IF DEFINED( DEBUG-LOG) &THEN 
               PUT UNFORMATTED "    + Исправили филиал " + strBranchId SKIP. &ENDIF
            END.
         END. ELSE 
         DO ON ERROR UNDO, THROW:
            FIND FIRST cust-role
               WHERE cust-role.class-code = "ImaginClient"
               AND cust-role.cust-cat = strCustCat
               AND cust-role.cust-id  = (IF strCustCat EQ "Ч" THEN STRING( person.person-id) ELSE STRING( cust-corp.cust-id))
               AND cust-role.file-name = "branch"
               AND cust-role.surrogate = strBranchId
               NO-ERROR.
         END.
         IF NOT AVAIL cust-role THEN 
         DO ON ERROR UNDO, THROW:
            CREATE cust-role.
            ASSIGN
               cust-role.class-code = "ImaginClient"
               cust-role.cust-cat = strCustCat
               cust-role.cust-id  = (IF strCustCat EQ "Ч" THEN STRING( person.person-id) ELSE STRING( cust-corp.cust-id))
               cust-role.file-name = "branch"
               cust-role.surrogate = strBranchId
               cust-role.open-date = (IF strCustCat EQ "Ч" THEN person.date-in ELSE cust-corp.date-in)
               cust-role.short-name = (IF strCustCat EQ "Ч" THEN person.name-last + " " + person.first-names ELSE cust-corp.name-short)
               .
            VALIDATE cust-role.
            /* RUN SetClientRole IN h_cust (STRING(BUFFER person:HANDLE), "Ч", YES) NO-ERROR. */
            &IF DEFINED( DEBUG-LOG) &THEN 
            PUT UNFORMATTED "    + Добавили филиал " + strBranchId SKIP. &ENDIF
         END.

         /*=========== Обновление документов ============ */
         DEF VAR mainDocRecId AS RECID NO-UNDO.
         mainDocRecId = ?.
         IF strCustCat EQ "Ч" THEN
            FOR EACH doc-mfr
               WHERE doc-mfr.clientid = bank.clients-mfr.id
               AND doc-mfr.volume = 1 AND doc-mfr.docnumber <> 'нет'
               NO-LOCK ON ERROR UNDO, THROW:
               MYNEXTDOC:
               DO ON ERROR UNDO, THROW:
                  IF doc-mfr.doctype = ?  THEN
                     UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_DOC_TYPE} + " IDDOC = " + STRING(doc-mfr.id) + " DOCTYPE=?"). 

                  strDocumentId = TRIM(doc-mfr.doctype).
                  FIND FIRST code
                     WHERE  code.class EQ "КодДокум"
                     AND code.parent EQ "КодДокум"
                     AND code.code = strDocumentId NO-LOCK NO-ERROR.
                  IF NOT AVAIL code THEN
                     UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_DOC_TYPE} + " IDDOC = " + STRING(doc-mfr.id) + " DOCTYPE не найден в классификаторе" ). 

                  strDocument = convertDoc2BIS( doc-mfr.doctype, doc-mfr.docseria, doc-mfr.docnumber).
                    
                  IF strDocument = "" THEN
                     UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_DOC_NUMBER} + " IDDOC = " + STRING(doc-mfr.id) + "DOCUMENT=''" ). 
                  strIssueDoc = (IF doc-mfr.placedoc = ? THEN "" ELSE TRIM(doc-mfr.placedoc)).

                  IF doc-mfr.docopendate = ? THEN
                     UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_DATEDOC} + " IDDOC = " + STRING(doc-mfr.id) ).
                  dateOpenDoc = doc-mfr.docopendate.

                  FIND FIRST cust-ident WHERE cust-ident.cust-cat       = strCustCat
                     AND cust-ident.cust-id        = iBisId
                     AND cust-ident.class-code     = "p-cust-ident"
                     AND cust-ident.cust-code-type = strDocumentId
                     AND cust-ident.cust-code      = strDocument
                     SHARE-LOCK NO-ERROR.

                  IF AVAIL cust-ident /* AND cust-ident.cust-code = strDocument AND cust-ident.open-date = dateOpenDoc */
                     THEN 
                  DO ON ERROR UNDO, THROW:
                     /* update */
                     ASSIGN
                        cust-ident.open-date      = dateOpenDoc
                        cust-ident.issue          = strIssueDoc
                        /* если документ был старым, его нужно снова сделать рабочим */
                        cust-ident.close-date = ? WHEN cust-ident.close-date NE ?
                        .
                     IF dateCloseDoc <> ? THEN cust-ident.close-date = dateCloseDoc.
                     VALIDATE cust-ident.
                     sUpdateSigns( cust-ident.class-code,
                        GetSurrogateBuffer("cust-ident",(BUFFER cust-ident:HANDLE)),
                        "Подразд", doc-mfr.dockodpodr, ?).
                  END.
                  ELSE 
                  DO ON ERROR UNDO, THROW:
                     CREATE cust-ident NO-ERROR.
                     ASSIGN
                        cust-ident.cust-cat       = strCustCat
                        cust-ident.cust-id        = iBisId
                        cust-ident.cust-code-type = strDocumentId
                        cust-ident.cust-type-num  = ?
                        cust-ident.cust-code      = strDocument
                        cust-ident.open-date      = dateOpenDoc
                        cust-ident.issue          = strIssueDoc
                        cust-ident.class-code     = "p-cust-ident"
                        .
                     IF dateCloseDoc <> ? THEN cust-ident.close-date = dateCloseDoc.
                            
                     sUpdateSigns( cust-ident.class-code,
                        GetSurrogateBuffer("cust-ident",(BUFFER cust-ident:HANDLE)),
                        "Подразд", doc-mfr.dockodpodr, ?).
                     DO ON ERROR UNDO, THROW:
                        VALIDATE cust-ident.
                        CATCH eAnyError AS Progress.Lang.Error:
                           UNDO, THROW NEW Progress.Lang.AppError( "VALIDATE:" + RETURN-VALUE + " " + eAnyError:GetMessage(1)).
                           /* txtErr = (IF txtErr <> "" THEN txtErr + ';' ELSE '') + RETURN-VALUE + " " + eAnyError:GetMessage(1) */.
                        END CATCH.
                     END.
                  END.
                  /* надо закрыть предыдущие документы такого же типа */
                  DEF BUFFER bcust-ident FOR cust-ident.
                  FOR EACH bcust-ident 
                     WHERE bcust-ident.cust-cat = cust-ident.cust-cat
                     AND bcust-ident.cust-id  = cust-ident.cust-id
                     AND bcust-ident.cust-code-type = cust-ident.cust-code-type
                     AND bcust-ident.class-code     = "p-cust-ident"
                     AND ROWID(cust-ident) <> ROWID(bcust-ident) ON ERROR UNDO, THROW:
                     ASSIGN
                        bcust-ident.close-date = cust-ident.open-date
                        .
                  END.
                  IF mainDocRecId EQ ? THEN mainDocRecId = RECID( cust-ident).
                  IF cust-ident.cust-code-type EQ "Паспорт" THEN mainDocRecId = RECID( cust-ident).
               END.  /* MYNEXTDOC: DO: */
            END. /* FOR EACH doc-mfr WHERE doc-mfr.clientid = bank.clients-mfr.id NO-LOCK: */

         /* обновляем карточку клиента по основному документу */
         IF mainDocRecId NE ? AND AVAIL person THEN 
         DO:
            FIND FIRST cust-ident WHERE RECID(cust-ident) EQ mainDocRecId NO-LOCK.
            ASSIGN
               person.document-id = cust-ident.cust-code-type 
               WHEN person.document-id NE cust-ident.cust-code-type
               person.document    = cust-ident.cust-code      
               WHEN person.document    NE cust-ident.cust-code
               .
            sUpdateSigns("person",STRING(iBisId),"Document4Date_vid",STRING(cust-ident.open-date,"99.99.9999"),?).
            VALIDATE person.
         END.
        
         /*=========== Обновление адресов ============ */
         DEFINE VAR vAddrMainType AS CHAR  NO-UNDO INIT ?.
         DEFINE VAR vAdrCntXattr  AS CHAR  NO-UNDO.
         RUN GetTypeMainAdr ( strCustCat, OUTPUT vAddrMainType, OUTPUT vAdrCntXattr).
         IF iBisId <> ? AND iBisId > 0 THEN 
         DO ON ERROR UNDO, THROW:
            FOR EACH adr-mfr
               WHERE adr-mfr.clientid = bank.clients-mfr.id
               /* AND adr-mfr.adressvolume = {&VOLUME_UPPER} */
               NO-LOCK ON ERROR UNDO, THROW:
               DEF VAR strKodRegOKATO AS CHAR NO-UNDO.
               DEF VAR ii AS INt NO-UNDO.
               DEF VAR vCountry-id AS CHAR NO-UNDO.

               strAdressType = adr-mfr.adresstype.
               dateAdressOpen = adr-mfr.adressopen.
               IF dateAdressOpen = ? THEN dateAdressOpen = TODAY.
               dateAdressClose = adr-mfr.adressclose. 
               strAdress = ConvertAdress2BIS(TRIM(adr-mfr.adress)).
               strStatusAdr = ENTRY(1,strAdress,"|").
               
               PUT UNFORMATTED "FOR EACH adr-mfr " strAdressType ";" strAdress SKIP.
               
               /* не грузим плохо заполненные адреса */
               IF strStatusAdr = "bad"
                  THEN UNDO, THROW NEW Progress.Lang.AppError( {&ERROR_ADR_UPDATE} + " IDADR = " + STRING(adr-mfr.id) ).
               
               strKodReg = ENTRY(2,strAdress,"|").
               strAdress = ENTRY(3,strAdress,"|").
               strKodRegOKATO = ConvertRegion ( strKodReg).
               vCountry-id = IF strKodRegOKATO NE ? AND LENGTH( strKodRegOKATO) > 1 THEN "RUS" ELSE "".

               /* этот адрес может быть старым в АБС, а в БИСе уже есть более новый */
               IF NOT bCreated THEN 
               DO:
                  FIND FIRST cust-ident USE-INDEX cust
                     WHERE cust-ident.class-code     = "p-cust-adr"
                     AND cust-ident.cust-cat       = strCustCat
                     AND cust-ident.cust-id        = iBisId
                     AND cust-ident.cust-code-type = strAdressType
                     AND cust-ident.issue          = strAdress
                     AND cust-ident.close-date     NE ?
                     NO-LOCK NO-ERROR.
                  IF AVAIL cust-ident THEN 
                  DO:
                	&IF DEFINED( DEBUG-LOG) &THEN 
                     PUT UNFORMATTED "    + адрес " + strAdressType + " уже был у клиента, наверно он старый и в БИС данные новее." SKIP. &ENDIF
                     RELEASE cust-ident.
                     NEXT.
                  END.
               END.
		
               /* ищем текущий адрес этого типа */
               FIND LAST cust-ident USE-INDEX cust
                  WHERE cust-ident.class-code     = "p-cust-adr"
                  AND cust-ident.cust-cat       = strCustCat
                  AND cust-ident.cust-id        = iBisId
                  AND cust-ident.cust-code-type = strAdressType
                  AND cust-ident.close-date     EQ ?
                  EXCLUSIVE-LOCK NO-ERROR.

               IF NOT AVAIL cust-ident OR
                  cust-ident.issue NE strAdress OR
                  GetXattrValueEx( "cust-ident", GetSurrogateBuffer("cust-ident",(BUFFER cust-ident:HANDLE)),
                  "country-id", "") NE vCountry-id OR
                  GetXattrValueEx( "cust-ident", GetSurrogateBuffer("cust-ident",(BUFFER cust-ident:HANDLE)),
                  "КодРегГНИ", "") NE strKodReg OR
                  GetXattrValueEx( "cust-ident", GetSurrogateBuffer("cust-ident",(BUFFER cust-ident:HANDLE)),
                  "КодРег", "") NE strKodRegOKATO
                  THEN 
               DO:
                  &IF DEFINED( DEBUG-LOG) &THEN 
                     PUT UNFORMATTED "    + нет старого адреса " + strAdressType + " или он не совпадает." SKIP.
                  &ENDIF
                  
                  /* если дату за один день меняют несколько раз, то просто исправляем текущую запись */
                  IF AVAIL cust-ident AND cust-ident.open-date NE dateAdressOpen
                     THEN 
                  DO:
                	   &IF DEFINED( DEBUG-LOG) &THEN 
                        PUT UNFORMATTED "    + адрес " + strAdressType + " заводим новый другой датой." SKIP.
                     &ENDIF
                     
                     RELEASE cust-ident.
                  END.
                  IF NOT AVAIL cust-ident THEN 
                  DO:
                	   &IF DEFINED( DEBUG-LOG) &THEN 
                        PUT UNFORMATTED "    + создаем адрес " + strAdressType SKIP.
                     &ENDIF
                     
                     CREATE cust-ident.
                     ASSIGN
                        cust-ident.class-code     = "p-cust-adr"
                        cust-ident.cust-cat       = strCustCat
                        cust-ident.cust-id        = iBisId
                        cust-ident.cust-code-type = strAdressType
                        cust-ident.cust-type-num  = ?
                        cust-ident.open-date      = dateAdressOpen
                        cust-ident.cust-code      =
                        STRING(YEAR (dateAdressOpen),"9999") +
                        STRING(MONTH(dateAdressOpen),"99")   +
                        STRING(DAY  (dateAdressOpen),"99")
                        .
                  END.
                  IF cust-ident.issue NE strAdress OR cust-ident.issue EQ ?
                     THEN 
                  DO:
                	   &IF DEFINED( DEBUG-LOG) &THEN 
                        PUT UNFORMATTED "    + присваиваем сам адрес " + strAdressType SKIP.
                     &ENDIF
                     
                     ASSIGN
                        cust-ident.issue          = strAdress
                        .
                  END.
                  VALIDATE cust-ident.
                  sUpdateSigns( "p-cust-adr",
                     GetSurrogateBuffer("cust-ident",(BUFFER cust-ident:HANDLE)),
                     "country-id", vCountry-id, ?).
                  sUpdateSigns( "p-cust-adr",
                     GetSurrogateBuffer("cust-ident",(BUFFER cust-ident:HANDLE)),
                     "КодРегГНИ", strKodReg, ?).
                  sUpdateSigns( "p-cust-adr",
                     GetSurrogateBuffer("cust-ident",(BUFFER cust-ident:HANDLE)),
                     "КодРег", strKodRegOKATO, ?).

                  /* синхронизируем с основной карточкой ФЛ */
                  IF strAdressType = vAddrMainType THEN 
                  DO:
                     sUpdateSigns( (IF strCustCat EQ "Ч" THEN "person" ELSE "cust-corp"),
                        STRING(iBisId) /*GetSurrogateBuffer("person",(BUFFER person:HANDLE))*/ ,
                        "УникКодАдреса", STRING(YEAR (dateAdressOpen),"9999") +
                        STRING(MONTH(dateAdressOpen),"99")   +
                        STRING(DAY  (dateAdressOpen),"99"), ?).
                     IF strCustCat EQ "Ч" THEN
                        sUpdateSigns( (IF strCustCat EQ "Ч" THEN "person" ELSE "cust-corp"), STRING(iBisId), "country-id", vCountry-id, ?).
                     sUpdateSigns( (IF strCustCat EQ "Ч" THEN "person" ELSE "cust-corp"), STRING(iBisId), "КодРегГНИ", strKodReg, ?).
                     sUpdateSigns( (IF strCustCat EQ "Ч" THEN "person" ELSE "cust-corp"), STRING(iBisId), "КодРег", strKodRegOKATO, ?).
                     IF strCustCat EQ "Ч" THEN 
                     DO:
                	      &IF DEFINED( DEBUG-LOG) &THEN 
                           PUT UNFORMATTED "    + присваиваем основной адрес " + strAdressType SKIP.
                        &ENDIF
                        
                        ASSIGN person.address[1] = strAdress.
                        VALIDATE person.
                     END.
                     IF strCustCat EQ "Ю" THEN 
                     DO:
                	      &IF DEFINED( DEBUG-LOG) &THEN 
                           PUT UNFORMATTED "    + присваиваем основной адрес " + strAdressType SKIP.
                        &ENDIF
                        
                        ASSIGN cust-corp.addr-of-low[1] = strAdress.
                        VALIDATE cust-corp.
                     END.
			            &IF DEFINED( DEBUG-LOG) &THEN 
                        PUT UNFORMATTED
                        "    + Синхронизирован адрес " + strAdressType + " от "
                        + string( dateAdressOpen) + " код " + GetXattrValueEx( (IF strCustCat EQ "Ч" THEN "person" ELSE "cust-corp"), string( iBisId), "УникКодАдреса", "-") SKIP.
			            &ENDIF

                  /* NEXT. */
                  END.
               END.
               ELSE &IF DEFINED( DEBUG-LOG) &THEN PUT UNFORMATTED "    + старый адрес " + strAdressType + " совпадает." SKIP. &ENDIF

                  /* закрываем старый адрес такого типа если был */
                  DEF BUFFER b2cust-ident FOR cust-ident.
               FOR EACH b2cust-ident
                  WHERE b2cust-ident.class-code     = "p-cust-adr"
                  AND b2cust-ident.cust-cat       = strCustCat
                  AND b2cust-ident.cust-id        = iBisId
                  AND b2cust-ident.cust-code-type = strAdressType
                  AND b2cust-ident.open-date      < cust-ident.open-date
                  AND b2cust-ident.close-date EQ ?
                  EXCLUSIVE-LOCK:
                  ASSIGN
                     b2cust-ident.close-date = cust-ident.open-date.
            	   &IF DEFINED( DEBUG-LOG) &THEN 
                     PUT UNFORMATTED "     + старый адрес " +
                     strAdressType + " от " + STRING(b2cust-ident.open-date) + " клиента закрыт" SKIP.
                  &ENDIF

               END.
            END.  /* FOR EACH adr-mfr */
         END. /* IF */
        
      END. /*   UpdateClient: */
      IF bCreated OR bChangeCID THEN 
      DO:
         FOR EACH bank.accounts_change
            WHERE accounts_change.cid = bank.clients-mfr.cid AND accounts_change.status_ <> 0:
            ASSIGN
               accounts_change.status_ = 0.
         END.
         IF bank.clients-mfr.cidpers NE ? THEN
            FOR EACH bank.accounts_change
               WHERE accounts_change.cid = bank.clients-mfr.cidpers AND accounts_change.status_ <> 0:
               ASSIGN
                  accounts_change.status_ = 0.
            END.
      END.
      IF txtErr <> '' THEN  UNDO, THROW NEW Progress.Lang.AppError( txtErr).
      PUT UNFORMATTED
         ( IF bCreated THEN "    + создан" ELSE "    + обновлен") + " клиент " + 
         ( IF iTypeCl = 1 OR iTypeCl = 3 THEN "ФЛ person" ELSE "ЮЛ cust") + "-id=" + STRING( iBisId) + " CID=" + STRING(iCid) SKIP.

      CATCH eAnyError AS Progress.Lang.Error:
         txtErr = (IF txtErr <> "" THEN txtErr + ';' ELSE '') + RETURN-VALUE + " " + eAnyError:GetMessage(1).
      END CATCH.
   END.  /* MYNEXT */
   IF txtErr <> "" THEN 
   DO ON ERROR UNDO, THROW:
      PUT UNFORMATTED STRING( NOW, "99/99/99 HH:MM:SS") + " (id=" + STRING( bank.clients-mfr.id) + ", CID=" + STRING( bank.clients-mfr.cid) + ") " + txtErr SKIP.
      IF INDEX( txtErr, "заблокирован другим пользователем") < 1 THEN 
      DO:
         bank.clients-mfr.statu = {&STATUS_OK_WITH_ERROR}.
         bank.clients-mfr.errortext = txtErr.
      END.
   END.
   ELSE 
   DO ON ERROR UNDO, THROW:
      bank.clients-mfr.statu = {&STATUS_OK}.
      bank.clients-mfr.errortext = ''.
   END.
   IF iBisId <> ? AND iBisId > 0
      THEN bank.clients-mfr.bisid = iBisId.
   VALIDATE bank.clients-mfr.
   &IF DEFINED( DEBUG-LOG) &THEN 
      PUT UNFORMATTED "    + время обработки клиента " + STRING( MTIME - iTime) + " м.сек." SKIP.
   &ENDIF
    
   iCurrentCount = iCurrentCount + 1.
   countClients = countClients + 1.
   IF countClients > {&COUNT_CLIENTS} THEN 
   DO:
      bAllClients = FALSE.
      LEAVE.
   END.
/*        IF INTERVAL( NOW, vStartTime, 'seconds') > 300 THEN LEAVE.*/
END.

/* PUT UNFORMATTED STRING( NOW, "99/99/99 HH:MM:SS") + " ===" SKIP. */

{intrface.del}

